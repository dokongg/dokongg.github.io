<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-05-12T11:53:37+00:00</updated><id>/feed.xml</id><title type="html">Dokongg Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Part 1-2. 자료구조</title><link href="/CS-Data-Structure" rel="alternate" type="text/html" title="Part 1-2. 자료구조" /><published>2021-05-11T00:00:00+00:00</published><updated>2021-05-11T00:00:00+00:00</updated><id>/CS-Data-Structure</id><content type="html" xml:base="/CS-Data-Structure">&lt;p&gt;[목차]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Array vs. Linked List&lt;/strong&gt; &lt;br /&gt;
1.1. Array
1.2. Linked List&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stack and Queue&lt;/strong&gt; &lt;br /&gt;
2.1. Stack &lt;br /&gt;
2.2. Queue&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tree&lt;/strong&gt; &lt;br /&gt;
3.1. Binary Tree(이진 트리)&lt;br /&gt;
3.2. 장기 스테줄러 &lt;br /&gt;
3.3. 단기 스케줄러 &lt;br /&gt;
3.4. 중기 스케줄러   &lt;br /&gt;
4.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1--array-vs-linked-list&quot;&gt;&lt;strong&gt;1.  Array vs. Linked List&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;11-array&quot;&gt;&lt;strong&gt;1.1. Array&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가장 기본적인 자료구조&lt;/li&gt;
  &lt;li&gt;논리적 저장 순서와 물리적 저장 순서가 일치
    &lt;ul&gt;
      &lt;li&gt;인덱스(index)로 해당 원소(element)에 접근할 수 있다.&lt;/li&gt;
      &lt;li&gt;random access 가능: 찾고자 하는 원소의 인덱스 값을 알고 있으면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Big-O(1)&lt;/code&gt;에 해당 원소로 접근할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 단점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;삭제 또는 삽입의 과정에서는 해당 원소에 접근하여 작업을 완료한 뒤(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o(n)&lt;/code&gt;), 또 한 가지의 작업을 추가적으로 해 줘야 하기 때문에, 시간이 더 걸린다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;삭제하는 경우
        &lt;ul&gt;
          &lt;li&gt;만약 배열의 원소 중 어느 원소를 삭제했다고 했을 때, 배열의 연속적인 특징이 깨지게 된다(빈 공간이 발생).&lt;/li&gt;
          &lt;li&gt;삭제한 원소보다 큰 인덱스를 갖는 원소들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; 해 줘야 하는 비용(cost)이 발생하고, 이 경우의 시간 복잡도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;이 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;삽입하는 경우
        &lt;ul&gt;
          &lt;li&gt;첫 번째 자리에 새로운 원소를 추가하고자 한다면, 모든 원소들의 인덱스를 1씩 shift 해 줘야 하므로, 이 경우에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 의 시간을 요구하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;12-linked-list&quot;&gt;&lt;strong&gt;1.2. Linked List&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Array를 삭제 또는 삽입하는 과정에서 발생하는 문제를 해결하기 위한 자료구조&lt;/li&gt;
  &lt;li&gt;각각의 원소들은 자기 자신 다음에 어떤 원소가 있는지 만을 기억하고 있다.
    &lt;ul&gt;
      &lt;li&gt;이 부분만 다른 값으로 바꿔주면 삭제와 삽입을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 만에 해결할 수 있는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 문제&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원하는 위치에 삽입을 하고자 하면 원하는 위치를 Search 해야 하고, 이 과정에서 첫 번째 원소부터 모두 다 확인해봐야 한다.
    &lt;ul&gt;
      &lt;li&gt;Array 와는 달리 논리적 저장 순서와 물리적 저장 순서가 일치하지 않기 때문&lt;/li&gt;
      &lt;li&gt;삽입하고 정렬하는 것과 마찬가지이다.&lt;/li&gt;
      &lt;li&gt;어떠한 원소를 삭제 또는 추가하고자 했을 때, 그 원소를 찾기 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 의 시간이 추가적으로 발생하게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;검색/삽입/삭제 에 대해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 의 시간 복잡도를 갖는다.&lt;/li&gt;
  &lt;li&gt;Tree의 근간이 되는 자료구조&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-stack-and-queue&quot;&gt;&lt;strong&gt;2. Stack and Queue&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;21-stack&quot;&gt;&lt;strong&gt;2.1. Stack&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;선형 자료구조의 일종&lt;/li&gt;
  &lt;li&gt;LIFO(Last In First Out&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;22-queue&quot;&gt;&lt;strong&gt;2.2. Queue&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;선형 자료구조의 일종&lt;/li&gt;
  &lt;li&gt;FIFO(First In First Out)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-tree&quot;&gt;&lt;strong&gt;3. Tree&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(1) 정의&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스택이나 큐와 같은 선형 구조가 아닌 비선형 자료구조&lt;/li&gt;
  &lt;li&gt;계층적 관계(Relationship)을 표현하는 자료구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 트리를 구성하고 있는 요소들(용어)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node(노드): 트리를 구성하고 있는 각각의 요소&lt;/li&gt;
  &lt;li&gt;Edge(간선): 트리를 구성하기 위해 노드와 노드를 연결하는 선&lt;/li&gt;
  &lt;li&gt;Root Node(루트 노드): 트리 구조에서 최상위에 있는 노드&lt;/li&gt;
  &lt;li&gt;Terminal Node(단말 노드, leaf Node): 하위에 다른 노드가 연결되어 있지 않는 노드&lt;/li&gt;
  &lt;li&gt;Internal Node(내부 노드, 비단말 노드): 단말 노드를 제외한 모든 노드, 루트 노드를 포함&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;31-binary-tree이진-트리&quot;&gt;&lt;strong&gt;3.1. Binary Tree(이진 트리)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;루트 노드를 중심으로 두 개의 서브 트리(큰 트리에 속하는 작은 트리)로 나뉘어 진다.
    &lt;ul&gt;
      &lt;li&gt;나뉘어진 두 서브 트리도 모두 이진 트리여야 한다.&lt;/li&gt;
      &lt;li&gt;공집합도 이진트리로 포함시켜야 한다.&lt;/li&gt;
      &lt;li&gt;각 층별로 숫자를 매겨서 이를 트리의 Level 이라 한다.
        &lt;ul&gt;
          &lt;li&gt;레벨의 값은 0부터 시작하며, 따라서 루트 노드의 레벨은 0이다.&lt;/li&gt;
          &lt;li&gt;height: 트리의 최고 레벨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배열로 구성된 Binary Tree는 노드의 개수가 n이고 root가 0이 아닌 1에서 시작할 때, i번째 노드에 대해서 아래의 index를 갖는다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;parent(i) = i/2&lt;/li&gt;
      &lt;li&gt;left_child(i) = 2i&lt;/li&gt;
      &lt;li&gt;right_child(i) = 2i+1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;32-binary-tree이진-트리의-종류&quot;&gt;&lt;strong&gt;3.2. Binary Tree(이진 트리)의 종류&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) Perfect Binary Tree(포화 이진 트리)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 레벨이 꽉 찬 이진 트리
(2) Complete Binary Tree(완전 이진 트리)&lt;/li&gt;
  &lt;li&gt;위에서 아래로, 왼쪽에서 오른쪽으로 순서대로 차곡차곡 채워진 이진 트리
(3)Full Binary Tree(정 이진 트리)&lt;/li&gt;
  &lt;li&gt;모든 노드가 0개 혹은 2개의 자식 노드만을 갖는 이진 트리
(4) BST(Binary Search Tree)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;33-bstbinary-search-tree&quot;&gt;&lt;strong&gt;3.3. BST(Binary Search Tree)&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;이진 탐색 트리에는 데이터를 저장하는 규칙이 존재&lt;/dt&gt;
      &lt;dd&gt;이 규칙은 특정 데이터의 위치를 찾는 데 사용할 수 있다.&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;ul&gt;
      &lt;li&gt;규칙 1. 이진 탐색 트리의 노드에 저장된 키는 유일하다.&lt;/li&gt;
      &lt;li&gt;규칙 2. 부모의 키가 왼쪽 자식 노드의 키보다 크다.&lt;/li&gt;
      &lt;li&gt;규칙 3. 부모의 키가 오른쪽 자식 노드의 키보다 작다.&lt;/li&gt;
      &lt;li&gt;규칙 4. 왼쪽과 오른쪽 서브트리도 이진 탐색 트리이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시간 복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;정확하게 말하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(h)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;트리의 높이를 하나씩 더해갈 수록 추가할 수 있는 노드의 수가 두 배씩 증가하기 때문
하지만 이러한 이진 탐색 트리는 Skewed Tree(편향 트리)가 될 수 있다.&lt;/li&gt;
          &lt;li&gt;이럴 경우 성능에 영향을 미치게 되며, 탐색의 Worst case가 되며, 시간 복잡도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;이 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rebalancing 기법
    &lt;ul&gt;
      &lt;li&gt;배열보다 많은 메모리를 사용하며 데이터를 저장했지만 탐색에 필요한 시간 복잡도가 같게 되는 비효율적인 문제를 해결하기 위한 기법&lt;/li&gt;
      &lt;li&gt;균형을 잡기 위한 트리 구조의 재조정&lt;/li&gt;
      &lt;li&gt;구현: Red-Black Tree&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-binary-heap&quot;&gt;&lt;strong&gt;4. Binary Heap&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(1) 정의&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자료 구조의 일종으로, Tree의 형식
    &lt;ul&gt;
      &lt;li&gt;Tree 중에서도 배열의 기반한 Complete Binary Tree&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;배열에 트리의 값을 넣어줄 때, 0번째는 건너뛰고 1번 index 부터 루트 노드가 시작된다.
    &lt;ul&gt;
      &lt;li&gt;노드의 고유번호 값과 배열의 index를 일치시켜 혼동을 줄이기 위함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 종류&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최대힙(max heap)
    &lt;ul&gt;
      &lt;li&gt;각 노드의 값이 해당 children의 값보다 크거나 같은 complete binary tree&lt;/li&gt;
      &lt;li&gt;최댓값을 찾는데 필요한 시간복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;루트 노드에 있는 값이 가장 크기 때문&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;complete binary tree 이므로 배열을 사용하여 효율적으로 관리할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;random access가 가능하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최소힙(min heap)
    &lt;ul&gt;
      &lt;li&gt;각 노드의 값이 해당 children의 값보다 작거나 같은 complete binary tree&lt;/li&gt;
      &lt;li&gt;최솟값을 찾는데 필요한 시간복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 시간 복잡도&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;heap의 구조를 계속 유지하기 위해서는 제거된 루트 노드를 대체할 다른 노드가 필요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;여기서 heap은 맨 마지막 노드를 루트 노드로 대체시킨 후, 다시 heapify 과정을 거쳐 heap 구조를 유지한다.&lt;/li&gt;
      &lt;li&gt;결국, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; 의 시간 복잡도로 최댓값 또는 최솟값이 접근할 수 있게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-red-black-treerbt&quot;&gt;&lt;strong&gt;5. Red Black Tree(RBT)&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BST를 기반으로 하는 트리 형식의 자료 구조&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BST의 삽입, 삭제 연산 과정에서 발생할 수 있는 문제점을 해결하기 위해 만들어진 자료구조&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;검색/삽입/삭제에 대한 시간 복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;동일한 노드 개수일 때, depth를 최소화하여 시간 복잡도를 줄이는 것이 핵심 아이디어
        &lt;ul&gt;
          &lt;li&gt;depth가 최소가 되는 경우는 tree가 complete binary tree 인 경우&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;51-red-black-tree의-정의&quot;&gt;&lt;strong&gt;5.1. Red Black Tree의 정의&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;각 노드는 Red or Black 이라는 색깔을 갖는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Root node의 색깔은 Black 이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 leaf node는 Black 이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 노드의 색깔이 Red 라면, 두 개의 children의 색깔은 모두 black 이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 노드에 대해서 노드로부터 descendant leaves 까지의 단순 경로는 모두 같은 수의 black nodes 들을 포함하고 있다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Black-Height: 노드 x로 부터 노드 x를 포함하지 않은 leaf node 까지의 simple path 상에 있는 black nodes 들의 개수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;52-red-black-tree의-특징&quot;&gt;&lt;strong&gt;5.2. Red Black Tree의 특징&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Binary Search Tree 이므로, BST의 특징을 모두 갖는다.&lt;/li&gt;
  &lt;li&gt;Root node 부터 leaf node 까지의 모든 경로 중 최소 경로와 최대 경로의 크기 비율은 2보다 크지 않다.
    &lt;ul&gt;
      &lt;li&gt;Balanced 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;노드의 child가 없을 경우 child를 가리키는 포인터는 NIL 값을 저장한다. 이러한 NIL 들은 leaf node로 간주한다.&lt;/li&gt;
  &lt;li&gt;Java Collection에서 ArrayList도 내부적으로 RBT로 이루어져 있고, HashMap에서의 Seperation Chaining에서도 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;53-red-black-tree의-삽입&quot;&gt;&lt;strong&gt;5.3. Red Black Tree의 삽입&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BST의 특성을 유지하면서 노드를 삽입&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;삽입된 노드의 색깔을 Red로 지정
    &lt;ul&gt;
      &lt;li&gt;Red로 지정하는 이유: Black-Height 변경을 최소화하기 위함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;삽입 결과 RBT의 특성을 위배(violation)하는 경우 노드의 색깔을 조정하고, Black-Height가 위배되었다면 rotation을 통해 height를 조정한다.
    &lt;ul&gt;
      &lt;li&gt;RBT의 동일한 height에 존재하는 internal node 들의 Black-height가 같아지게 되고, 최소 경로와 최대 경로의 크기 비율이 2 미만으로 유지된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;54-red-black-tree의-삭제&quot;&gt;&lt;strong&gt;5.4. Red Black Tree의 삭제&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;BST의 특성을 유지하면서 노드를 삭제&lt;/li&gt;
  &lt;li&gt;삭제될 노드의 개수에 따라 rotation 방법이 달라지게 된다.
    &lt;ul&gt;
      &lt;li&gt;지워진 노드의 색깔이 Black 이라면 Black-Height가 1 감소한 경로에 black node가 1개 추가되도록 rotation하고 노드의 색깔을 조정한다.&lt;/li&gt;
      &lt;li&gt;지워진 노드의 색깔이 Red 라면 violation이 발생하지 않으므로 RBT가 유지된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-hash-table&quot;&gt;&lt;strong&gt;6. Hash Table&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;내부적으로 배열을 사용하여 데이터를 저장하기 때문에 빠른 검색 속도를 갖는다.&lt;/li&gt;
  &lt;li&gt;average case에 대한 시간 복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;특정한 값을 검색하는 데 데이터 고유의 인덱스로 접근하게 되기 때문&lt;/li&gt;
      &lt;li&gt;항상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;인 것은 아니며, average case에 대해서 인 것은 collision 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문제점
    &lt;ul&gt;
      &lt;li&gt;인덱스로 저장되는 key 값이 불규칙&lt;/li&gt;
      &lt;li&gt;해결책
        &lt;ul&gt;
          &lt;li&gt;특별한 알고리즘을 이용하여 저장할 데이터와 연관된 고유한 숫자를 만들어 낸 뒤 이를 인덱스로 사용한다.&lt;/li&gt;
          &lt;li&gt;특정 데이터가 저장되는 인덱스는 그 데이터만의 고유한 위치이기 때문에, 삽입 연산 시 다른 데이터의 사이에 끼어들거나, 삭제 시 다른 데이터로 채울 필요가 없으므로 연산에서 추가적인 비용이 없도록 만들어진 구조&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;61-hash-function&quot;&gt;&lt;strong&gt;6.1. Hash Function&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hash method&lt;/li&gt;
  &lt;li&gt;인덱스로 사용할 저장할 데이터와 연관된 고유한 숫자를 만들어 내는 해시 함수 또는 hash method
    &lt;ul&gt;
      &lt;li&gt;hash code: 해시 함수를 통해 반환된 데이터의 고유 숫자 값
        &lt;ul&gt;
          &lt;li&gt;저장되는 값들의 key 값을 hash function을 통해서 작은 범위의 값들로 바꿔준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;어설픈 해시 함수를 통해 key 값들을 결정하는 경우 동일한 값이 도출될 수 있다.
    &lt;ul&gt;
      &lt;li&gt;collision 발생
        &lt;ul&gt;
          &lt;li&gt;동일한 key 값에 복수 개의 데이터가 하나의 테이블에 존재하게 되는 것&lt;/li&gt;
          &lt;li&gt;서로 다른 두 개의 키가 같은 인덱스로 hashing(hash 함수를 통해 계산됨을 의미)되면 같은 곳에 저장할 수 없게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;collision이 많아 질수록 검색에 필요한 시간복잡도가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt; 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 에 가까워 진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 해시 함수가 갖추어야 하는 조건&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 좋은 해시 함수: 키의 일부분을 참조하여 해시 값을 만들지 않고, 키 전체를 참조하여 생성
    &lt;ul&gt;
      &lt;li&gt;좋은 해시 함수는 키가 어떤 특성을 갖고 있느냐에 따라 달라진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;무조건 1:1로 만드는 것보다 collision을 최소화 하는 방향으로 설계하며, 이 collision에 대비하여 어떻게 대응할 것인가가 더 중요
    &lt;ul&gt;
      &lt;li&gt;1:1 대응이 되도록 만드는 것이 거의 불가능하기도 하다.
        &lt;ul&gt;
          &lt;li&gt;이러한 해시함수를 만든다 하더라도 이는 array와 다를 바 없고, 메모리도 너무 많이 차지하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) hashing 된 인덱스에 이미 다른 값이 들어 있다면, 새 데이터를 저장할 다른 위치를 찾은 뒤에야 저장할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;61-resolve-conflict&quot;&gt;&lt;strong&gt;6.1. Resolve Conflict&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) Open Conflict&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해시 충돌이 발생하면(즉, 삽입하려는 해시 커밋이 이미 사용 중인 경우), 다른 해시 버킷에 해당 자료를 삽입하는 방식
    &lt;ul&gt;
      &lt;li&gt;버킷: 바구니와 같은 개념으로, 데이터를 저장하기 위한 공간&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공개 주소 방식이라고도 불리며, collision이 발생하면 데이터를 저장할 장소를 찾아 헤맨다.
    &lt;ul&gt;
      &lt;li&gt;최악의 경우: 비어있는 버킷을 찾지 못하고 탐색을 시작한 위치까지 되돌아 오는 경우
        &lt;ul&gt;
          &lt;li&gt;Linear Probing: 순차적으로 탐색하며, 비어있는 버킷을 찾을 때까지 계속 진행된다.&lt;/li&gt;
          &lt;li&gt;Quandratic probing: 2차 함수를 이용해 탐색할 위치를 찾는다.&lt;/li&gt;
          &lt;li&gt;Double hashing probing: 하나의 해시 함수에서 충돌이 발생하면, 2차 해시 함수를 이용해 새로운 주소를 할당한다. 위 두 가지 방법에 비해 많은 연산량을 요구하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot;&gt;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="CS" /><summary type="html">[목차]</summary></entry><entry><title type="html">[책 - 이것이 자바다] 복습</title><link href="/Java-01" rel="alternate" type="text/html" title="[책 - 이것이 자바다] 복습" /><published>2021-05-08T00:00:00+00:00</published><updated>2021-05-08T00:00:00+00:00</updated><id>/Java-01</id><content type="html" xml:base="/Java-01">&lt;h4 id=&quot;chapter-07-객체지향-프로그래밍-ii&quot;&gt;&lt;strong&gt;Chapter 07. 객체지향 프로그래밍 II&lt;/strong&gt;&lt;/h4&gt;
&lt;h4 id=&quot;6-추상클래스abstract-class&quot;&gt;&lt;strong&gt;6. 추상클래스(abstract class)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;6.3. 추상클래스의 작성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우가 있다.&lt;/li&gt;
  &lt;li&gt;상속계층도를 따라 내려 갈수록 세분화되며, 올라갈수록 공통요소만 남게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-인터페이스interface&quot;&gt;&lt;strong&gt;7. 인터페이스(interface)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;7.2. 인터페이스의 작성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스의 멤버들의 제약사항
    &lt;ul&gt;
      &lt;li&gt;모든 멤버 변수는 public static final 이어야 하며, 이를 생략할 수 있다.&lt;/li&gt;
      &lt;li&gt;모든 메서드는 public abstract 이어야 하며, 이를 생략할 수 있다. &lt;br /&gt;
단, static 메서드와 디폴트 메서드는 예외(JDK 1.8부터)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;인터페이스이름&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;타입&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;상수이름&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;값&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;메서드이름&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;매개변수목록&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7.6. 인터페이스를 이용한 다형성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;리턴 타입이 인터페이스라는 것은 메서드가 해당 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.7. 인터페이스의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;개발시간을 단축시킬 수 있다.&lt;/li&gt;
  &lt;li&gt;표준화가 가능하다.&lt;/li&gt;
  &lt;li&gt;서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;독립적인 프로그래밍이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.8. 인터페이스의 이해&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클래스를 사용하는 쪽(User)과 클래스를 제공하는 쪽(Provider)이 있다. &lt;br /&gt;
메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 된다(내용은 몰라도 된다).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.9. 디폴트 메서드와 static 메서드&lt;/p&gt;

&lt;p&gt;(1) 디폴트 메서드&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;디폴트 메서드는 추상 메서드의 기본적인 구현을 제공하는 메서드
    &lt;ul&gt;
      &lt;li&gt;추상 메서드가 아니기 때문에 디폴트 메서드가 새로 추가되어도 해당 인터페이스를 구현한 클래스를 변경하지 않아도 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;public 생략 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;새로 추가된 디폴트 메서드가 기존의 메서드와 이름이 중복되어 충돌하는 경우
    &lt;ul&gt;
      &lt;li&gt;여러 인터페이스의 디폴트 메서드 간의 충돌: 인터페이스를 구현한 클래스에서 디폴트 메서드를 오버라이딩해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디폴트 메서드와 조상 클래스의 메서드 간의 충돌
    &lt;ul&gt;
      &lt;li&gt;조상 클래스의 메서드가 상속되고, 디폴트 메서드는 무시된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">Chapter 07. 객체지향 프로그래밍 II 6. 추상클래스(abstract class) 6.3. 추상클래스의 작성 기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우가 있다. 상속계층도를 따라 내려 갈수록 세분화되며, 올라갈수록 공통요소만 남게 된다.</summary></entry><entry><title type="html">[Programmers] 기능개발</title><link href="/Algorithms-01" rel="alternate" type="text/html" title="[Programmers] 기능개발" /><published>2021-05-06T00:00:00+00:00</published><updated>2021-05-06T00:00:00+00:00</updated><id>/Algorithms-01</id><content type="html" xml:base="/Algorithms-01">&lt;p&gt;■ &lt;strong&gt;문제&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42586&quot;&gt;https://programmers.co.kr/learn/courses/30/lessons/42586&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;■ &lt;strong&gt;내 풀이&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;■ &lt;strong&gt;&lt;span class=&quot;hightlighter&quot;&gt;NOTE&lt;/span&gt;&lt;/strong&gt; &lt;br /&gt;
① 첫 번째 정답 코드 풀이 참조&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;으로 선언하고, for문 내에&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;dayOfend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;한 다음 리턴은&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dayOfend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;② 처음에는 brute-force로 생각하고, 두 번째로 계산하면서 할 수 있는 지 고려해보기.&lt;/p&gt;</content><author><name></name></author><category term="Algorithms" /><summary type="html">■ 문제 https://programmers.co.kr/learn/courses/30/lessons/42586</summary></entry><entry><title type="html">Part 1-4. 운영체제</title><link href="/CS-OS" rel="alternate" type="text/html" title="Part 1-4. 운영체제" /><published>2021-05-06T00:00:00+00:00</published><updated>2021-05-06T00:00:00+00:00</updated><id>/CS-OS</id><content type="html" xml:base="/CS-OS">&lt;p&gt;[목차]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;프로세스와 스레드의 차이&lt;/strong&gt; &lt;br /&gt;
1.1. 프로세스(Process) &lt;br /&gt;
1.2. 프로세스 제어 블록(PCB, Process Control Block) &lt;br /&gt;
1.3. 스레드(Thread)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;멀티 스레드&lt;/strong&gt; &lt;br /&gt;
2.1. 멀티 스레드의 장점 &lt;br /&gt;
2.2. 멀티 스레드의 문제점 &lt;br /&gt;
2.3. 멀티 스레드와 멀티 프로세스&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;스케줄러&lt;/strong&gt; &lt;br /&gt;
3.1. Queue의 종류 &lt;br /&gt;
3.2. 장기 스테줄러 &lt;br /&gt;
3.3. 단기 스케줄러 &lt;br /&gt;
3.4. 중기 스케줄러&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CPU 스케줄러&lt;/strong&gt; &lt;br /&gt;
4.1. FCFS(First Come First Served) &lt;br /&gt;
4.2. SJF(Shortest Job First) &lt;br /&gt;
4.3. SRTF(Shortest Remaining Time First) &lt;br /&gt;
4.4. Priority Scheduling &lt;br /&gt;
4.5. RR(Round Robin)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;동기와 비동기의 차이&lt;/strong&gt; &lt;br /&gt;
5.1. Sync vs. Async &lt;br /&gt;
5.2. Blocking I/O Model &lt;br /&gt;
5.3. Non-Blocking I/O Model &lt;br /&gt;
5.4. Asynchronous I/O Model&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;프로세스 동기화&lt;/strong&gt; &lt;br /&gt;
6.1. Critical Section(임계영역) &lt;br /&gt;
6.2. Critical Section Problem(임계영역 문제) &lt;br /&gt;
6.3. Critical Section Problem의 해결책&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;메모리 관리 전략&lt;/strong&gt; &lt;br /&gt;
7.1. 메모리 관리 배경 &lt;br /&gt;
7.2. 메모리 단편화(Fragmentation) &lt;br /&gt;
7.3. 메모리 단편화(Fragmentation) 문제 해결책&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;가상 메모리&lt;/strong&gt; &lt;br /&gt;
8.1. 가상 메모리 개발 배경 &lt;br /&gt;
8.2. 가상 메모리가 하는 일 &lt;br /&gt;
8.3. Demand Paging(요구 페이징) &lt;br /&gt;
8.4. 페이지 교체 알고리즘&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;캐시의 지역성&lt;/strong&gt; &lt;br /&gt;
9.1. 캐시의 지역성 원리 &lt;br /&gt;
9.2. Caching line&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-프로세스와-스레드의-차이&quot;&gt;&lt;strong&gt;1. 프로세스와 스레드의 차이&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;11-프로세스process&quot;&gt;&lt;strong&gt;1.1. 프로세스(Process)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 프로세스란?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실행 중인 프로그램&lt;/li&gt;
  &lt;li&gt;디스크로부터 메모리에 적재되어 CPU의 할당을 받을수 있는 것&lt;/li&gt;
  &lt;li&gt;운영체제로부터 주소 공간, 파일, 메모리 등을 할당받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 프로세스의 구성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수의 매개변수, 복귀주소와 로컬변수와 같은 임시자료를 갖는 프로세스 스택과 전역변수들을 수록하는 데이터 섹션을 포함&lt;/li&gt;
  &lt;li&gt;프로세스 실행 중에 동적으로 할당되는 메모리인 힙을 포함&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;12-프로세스-제어블록pcb-process-control-block&quot;&gt;&lt;strong&gt;1.2. 프로세스 제어블록(PCB, Process Control Block)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) PCB란?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특정 프로세스에 대한 중요한 정보를 저장하고 있는 운영체제의 자료구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) PCB의 역할&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;운영체제는 프로세스를 관리하기 위해 프로세스를 생성하는 것과 동시에 고유한 PCB를 생성한다.&lt;/li&gt;
  &lt;li&gt;프로세스는 CPU의 할당을 받아 작업을 처리하다가 프로세스를 전환하는 일이 발생하면, 진행하던 작업을 저장한 다음 CPU를 반환해야 한다. 이 때, 작업하던 진행사항을 모두 PCB에 저장하게 된다. 그리고 다시 CPU를 할당받으면, PCB에 저장되어 있던 내용을 불러와 이전에 종료됐던 시점부터 다시 작업을 시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) PCB에 저장되는 정보&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스 식별자(Process ID, PID): 프로세스 식별번호&lt;/li&gt;
  &lt;li&gt;프로세스 상태: new/ready/running/waiting/ternimated 등의 상태를 저장&lt;/li&gt;
  &lt;li&gt;프로그램 카운터: 프로세스가 다음에 실행할 명령어의 주소&lt;/li&gt;
  &lt;li&gt;CPU 레지스터&lt;/li&gt;
  &lt;li&gt;CPU 스케줄링 정보: 프로세스 우선순위, 스케줄 큐에 대한 포인터 등&lt;/li&gt;
  &lt;li&gt;메모리 관리정보: 페이지 테이블 또는 세그먼트 테이블과 같은 정보를 포함&lt;/li&gt;
  &lt;li&gt;입출력 상태정보: 프로세스에 할당된 입출력 장치들과 열린 파일 목록&lt;/li&gt;
  &lt;li&gt;어카운팅 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;13-스레드thread&quot;&gt;&lt;strong&gt;1.3. 스레드(Thread)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 스레드란?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스의 실행 단위&lt;/li&gt;
  &lt;li&gt;한 프로세스 내에서 동작하는 여러 실행 흐름&lt;/li&gt;
  &lt;li&gt;프로세스 내 주소 공간이나 자원을 공유할 수 있다.&lt;/li&gt;
  &lt;li&gt;스레드 ID, 프로그램 카운터, 레지스터 집합, 스택으로 구성
    &lt;ul&gt;
      &lt;li&gt;각자의 스레드는 독립적인 작업을 수행해야 하기 때문에 각자의 스택, PC 레지스터 값을 갖고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 스레드의 역할&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 프로세스에 속한 다른 스레드와 코드, 데이터 섹션, 열린 파일이나 신호와 같은 운영체제 자원들을 공유한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 멀티 스레딩&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 프로세스를 여러 개의 실행 단위로 구분하여, 자원을 공유하고 자원의 생성과 관리의 중복을 최소화하여 수행 능력을 향상시키는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) 스레드마다 스택을 독립적으로 할당하는 이유&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스택이란?
    &lt;ul&gt;
      &lt;li&gt;함수 호출 시 전달되는 인자, 되돌아갈 주소값 및 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간&lt;/li&gt;
      &lt;li&gt;스택 메모리 공간이 독립적이다 = 독립적인 함수 호출이 가능하며, 독립적인 실행 흐름이 추가된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스레드의 정의에 따라 독립적인 실행흐름을 추가하기 위한 최소조건이기 때문&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) 스레드마다 PC Register를 독립적으로 할당하는 이유&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PC Register의 값은 스레드가 명령어를 어디까지 수행했는 지를 나타냄&lt;/li&gt;
  &lt;li&gt;스레드는 CPU를 할당받았다가 스케줄러에 의해 다시 선점당하기 때문에, 명령어를 연속적으로 수행하지 못한다. 따라서, 명령어를 어느 부분까지 수행했는지 기억할 필요가 있기 때문&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-멀티-스레드&quot;&gt;&lt;strong&gt;2. 멀티 스레드&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;21-멀티-스레딩의-장점&quot;&gt;&lt;strong&gt;2.1. 멀티 스레딩의 장점&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스를 이용해 동시에 처리하던 일을 스레드로 구현하면, 메모리 공간과 시스템 자원의 소모가 줄어들게 된다.&lt;/li&gt;
  &lt;li&gt;스레드 간 통신이 필요한 경우에도 별도의 자원을 이용하는 것이 아니라 전역 변수의 공간 또는 동적으로 할당된 공간인 Heap 영역을 이용하여 데이터를 주고 받을 수 있다(스레드 간 통신 방법은 프로세스 간 통신 방법보다 훨씬 간단하다).&lt;/li&gt;
  &lt;li&gt;스레드의 Context switch는 프로세스의 Context switch와 달리 캐시 메모리를 비울 필요가 없기 때문에 더 빠르다.
    &lt;ul&gt;
      &lt;li&gt;시스템의 처리율(throughput)이 향상되고 자원 소모가 줄어들며, 자연스럽게 프로그램의 응답 시간이 단축된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;22-멀티-스레딩의-문제점&quot;&gt;&lt;strong&gt;2.2. 멀티 스레딩의 문제점&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;멀티 프로세스 기반으로 프로그래밍 할 때는 프로세스 간 공유하는 자원이 없기 때문에 동일한 자원에 접근하는 일이 없었다.&lt;/li&gt;
  &lt;li&gt;멀티 스레딩은 서로 다른 프로세스가 데이터 힙 영역을 공유하기 때문에 어떤 스레드가 다른 스레드에서 사용 중인 변수나 자료구조에 접근했을 때, 엉뚱한 값을 가져오거나 이로 인해 수정하는 일이 발생한다.
    &lt;ul&gt;
      &lt;li&gt;동기화 작업이 필요: 동기화를 통해 작업 처리 순서를 컨트롤하고, 공유 자원에 접근하는 것을 컨트롤 하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동기화 작업으로 인하여 과도한 락이 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;23-멀티-스레드와-멀티-프로세스&quot;&gt;&lt;strong&gt;2.3. 멀티 스레드와 멀티 프로세스&lt;/strong&gt;&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;멀티 스레드&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;멀티 프로세스&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;장점&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;멀티 프로세스보다 적은 메모리 공간을 차지하고 문맥전환이 빠르다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;하나의 프로세스가 죽어도 다른 프로세스에 영향이 없다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;단점&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;- 오류로 인해 하나의 스레드가 종료되면, 전체 스레드가 종료될 수 있다.&lt;br /&gt;- 동기화 문제&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;멀티 스레드보다 많은 메모리 공간과 CPU 시간 차지&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;3-스케줄러&quot;&gt;&lt;strong&gt;3. 스케줄러&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;31-queue의-종류&quot;&gt;&lt;strong&gt;3.1. Queue의 종류&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;: 프로세스를 스케줄링하기 위한 3가지 종류의 Queue&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Job Queue: 현재 시스템 내에 있는 모든 프로세스의 집합&lt;/li&gt;
  &lt;li&gt;Ready Queue: 현재 메모리 내에 있으면서 CPU를 잡아서 실행되기를 기다리는 집합&lt;/li&gt;
  &lt;li&gt;Device Queue: Device I/O 작업을 대기하고 있는 프로세스의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;32-장기-스케줄러long-term-scheduler-or-job-scheduler&quot;&gt;&lt;strong&gt;3.2. 장기 스케줄러(Long-term Scheduler or Job Scheduler)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 메모리와 디스크 사이의 스케줄링 담당&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리는 한정되어 있기 때문에 많은 프로세스가 한꺼번에 올라오는 경우, 대용량 메모리(일반적으로 디스크)에 임시로 저장된다. 이 pool에 저장되어 있는 프로세스 중 어떤 프로세스에 메모리를 할당하여 Ready Queue에 보낼 것인지 결정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 프로세스에 memory 및 각종 resource 할당(admit) &lt;br /&gt;
(3) 실행 중인 프로세스의 수(degree of multiprogramming) 제어 &lt;br /&gt;
(4) 프로세스의 상태: new → ready(in memory)&lt;/p&gt;

&lt;h5 id=&quot;33-단기-스케줄러short-term-scheduler-or-cpu-scheduler&quot;&gt;&lt;strong&gt;3.3. 단기 스케줄러(Short-term Scheduler or CPU Scheduler)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) CPU와 메모리 사이의 스케줄링을 담당 &lt;br /&gt;
(2) Ready Queue에 존재하는 프로세스 중 어떤 프로세스를 running 시킬 것인지 결정 &lt;br /&gt;
(3) 프로세스에 CPU를 할당(Scheduler dispatch) &lt;br /&gt;
(4) 프로세스의 상태: ready → running → waiting → ready&lt;/p&gt;

&lt;h5 id=&quot;34-중기-스케줄러mid-term-scheduler-or-swapper&quot;&gt;&lt;strong&gt;3.4. 중기 스케줄러(Mid-term Scheduler or Swapper)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 여유공간 마련을 위해 프로세스를 통째로 메모리에서 디스크로 쫓아냄(Swapping) &lt;br /&gt;
(2) 프로세스에게서 memory를 deallocate 한다. &lt;br /&gt;
(3) 실행 중인 프로세스의 수(degree of multiprogramming) 제어 &lt;br /&gt;
(4) 현 시스템에서 메모리에 너무 많은 프로그램이 동시에 올라가는 것을 조절하는 스케줄러 &lt;br /&gt;
(5) 프로세스의 상태: ready → suspend&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;※ suspend(stopped) 상태&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;외부적인 이유로 프로세스의 수행이 정지된 상태로 메모리에서 내려간 상태&lt;/li&gt;
    &lt;li&gt;프로세스 전부가 디스크로 swap out 된다.&lt;/li&gt;
    &lt;li&gt;blocked 상태는 다른 I/O를 기다리는 상태이기 때문에 스스로 ready 상태로 돌아갈 수 있지만, suspend 상태는 외부적인 이유로 suspending 되었기 때문에 스스로 돌아갈 수 없다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;4-cpu-스케줄러&quot;&gt;&lt;strong&gt;4. CPU 스케줄러&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;41-fcfsfirst-come-first-served&quot;&gt;&lt;strong&gt;4.1. FCFS(First Come First Served)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 온 순서대로 처리&lt;/li&gt;
  &lt;li&gt;비선점형(Non-preemptive) 스케줄링&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;※ 선점형(Preemptive) 스케줄링&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;현재 수행 중인 프로세스의 남은 burst 시간보다 더 짧은 CPU burst 시간을 갖는 새로운 프로세스가 도착하면, CPU를 빼앗긴다.&lt;/li&gt;
    &lt;li&gt;더 높은 우선순위의 프로세스가 도착하면, 실행 중인 프로세스를 멈추고 CPU를 선점한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;※ 비선점형(Non-preemptive) 스케줄링&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;일단 CPU를 잡으면 CPU burst가 완료될 때까지 CPU를 반환하지 않는다.&lt;/li&gt;
    &lt;li&gt;할당되었던 CPU가 반환될 때만 스케줄링이 이루어진다.&lt;/li&gt;
    &lt;li&gt;더 높은 우선순위의 프로세스가 도착하면, Ready Queue의 head에 넣는다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(2) 문제점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;convoy effect 발생
    &lt;ul&gt;
      &lt;li&gt;소요 시간이 긴 프로세스가 먼저 도달하여 시간을 잡아 먹고 있는 바람에 효율성이 떨어지는 현상 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;42-sjfshortest-job-first&quot;&gt;&lt;strong&gt;4.2. SJF(Shortest Job First)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다른 프로세스가 먼저 도착했어도, CPU burst 시간이 짧은 프로세스에게 먼저 할당된다.&lt;/li&gt;
  &lt;li&gt;비선점형(Non-preemptive) 스케줄링&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 문제점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starvation 발생
    &lt;ul&gt;
      &lt;li&gt;우선순위가 낮은 프로세스가 우선순위가 높은 프로세스가 있는 한은 절대 실행하지 못하고 무한정 기다리게 되는 현상&lt;/li&gt;
      &lt;li&gt;특정 프로세스가 지나치게 차별받게 된다.&lt;/li&gt;
      &lt;li&gt;CPU 사용량이 짧은 job을 극단적으로 소요하기 때문에, 사용 시간이 긴 프로세스는 영원히 CPU를 할당받을 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;43-srtfshortest-remaining-time-first&quot;&gt;&lt;strong&gt;4.3. SRTF(Shortest Remaining Time First)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 프로세스가 도착할 때 마다 새로운 스케줄링이 이루어진다.&lt;/li&gt;
  &lt;li&gt;선점형(Preemptive) 스케줄링&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 문제점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starvation&lt;/li&gt;
  &lt;li&gt;새로운 프로세스가 도착할 때 마다 스케줄링을 다시 하기 때문에 CPU burst 시간을 측정할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;44-priority-scheduling&quot;&gt;&lt;strong&gt;4.4. Priority Scheduling&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선순위가 가장 높은 프로세스에게 CPU를 할당하는 방법&lt;/li&gt;
  &lt;li&gt;우선순위는 정수로 표현되고, 숫자가 작을 수록 우선순위가 높다.&lt;/li&gt;
  &lt;li&gt;선점형(Preemptive) 스케줄링/비선점형(Non-preemptive) 스케줄링&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 문제점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starvation&lt;/li&gt;
  &lt;li&gt;무기한 봉쇄(Indefinite Blocking)
    &lt;ul&gt;
      &lt;li&gt;실행 준비는 되어 있으나, CPU를 사용하지 못하는 프로세스가 무기한 대기하는 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 해결책&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;aging
    &lt;ul&gt;
      &lt;li&gt;아무리 우선순위가 낮은 프로세스라도 오래 기다리면 우선 순위를 높여주는 방법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;45-rrround-robin&quot;&gt;&lt;strong&gt;4.5. RR(Round Robin)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현대적인 CPU 스케줄링 방법&lt;/li&gt;
  &lt;li&gt;각 프로세는 동일한 크기의 할당 시간(time quantum)을 갖게 된다.
    &lt;ul&gt;
      &lt;li&gt;할당 시간이 지나면 프로세스는 선점당하고, ready Queue의 제일 뒤에 가서 다시 줄을 선다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU 사용 시간이 랜덤한 프로세스들이 섞여있을 경우에 효율적이다.&lt;/li&gt;
  &lt;li&gt;프로세스들의 context를 저장할 수 있기 때문에 이러한 스케줄링이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 장점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;응답 시간이 빨라진다.&lt;/li&gt;
  &lt;li&gt;어떠한 프로세스도 (n-1)q time 단위 이상 기다리지 않는다.
    &lt;ul&gt;
      &lt;li&gt;n개의 프로세스가 ready queue에 있고 할당 시간이 q인 경우, 각 프로세스는 q 단위로 CPU 시간의 1/n을 얻는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로세스가 기다리는 시간이 CPU를 사용할 만큼 증가한다(공정한 스케줄링).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 주의점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;적절한 time quantum 설정
    &lt;ul&gt;
      &lt;li&gt;time quantum이 너무 커지는 경우: FCFS와 같아진다.&lt;/li&gt;
      &lt;li&gt;time quantum이 너무 작아지는 경우: 스케줄링 알고리즘 목적에는 이상적이지만, 작은 context switch로 overhead가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-동기와-비동기의-차이&quot;&gt;&lt;strong&gt;5. 동기와 비동기의 차이&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(출처: &lt;a href=&quot;https://asfirstalways.tistory.com/348&quot;&gt;https://asfirstalways.tistory.com/348&lt;/a&gt;)&lt;/p&gt;

&lt;h5 id=&quot;51-sync-vs-async&quot;&gt;&lt;strong&gt;5.1. Sync vs. Async&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;동기: 메소드를 실행시킴과 동시에 반환값이 기대되는 경우&lt;/li&gt;
  &lt;li&gt;비동기: 메소드를 실행시킴과 동시에 반환값이 기대되지 않는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;52-blocking-io-model&quot;&gt;&lt;strong&gt;5.2. Blocking I/O Model&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/files/06fig01.gif&quot; alt=&quot;Alt text&quot; /&gt; &lt;br /&gt;
(출처: &lt;a href=&quot;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html&quot;&gt;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일단 I/O 작업은 User Level(application)에서 직접 수행할 수 없다.
    &lt;ul&gt;
      &lt;li&gt;실제 I/O 작업은 Kernel level(OS)에서 일어나는 과정이다.&lt;/li&gt;
      &lt;li&gt;유저 프로세스(application)는 커널(OS)에게 I/O 작업에 대한 요청을 해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I/O 작업 처리를 위해 User level에 있던 application이 시스템 함수를 호출한다(System call).
    &lt;ul&gt;
      &lt;li&gt;이 때, context switching이 일어난다.&lt;/li&gt;
      &lt;li&gt;그리고 kernel level에서 해당 I/O 작업이 끝나고 데이터를 반환하게 되면, 그 때가 되서야 애플리케이션 단의 스레드에 걸렸던 block이 풀리게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;application 관점에서 보면 아무런 동작도 안하는 것처럼 보이지만, 실제로는 커널에서 I/O 작업을 수행하느라 block 되어 있는 것이다.
    &lt;ul&gt;
      &lt;li&gt;blocking I/O의 문제점이며, 개선 포인트이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;※ Synchronous, Blocking I/O의 비교&lt;/em&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Synchronous
      &lt;ul&gt;
        &lt;li&gt;작업을 요청한 후 해당 작업의 결과가 나올 때까지 기다린 후 처리한다.&lt;/li&gt;
        &lt;li&gt;I/O 작업에 대한 readiness를 기다린다.&lt;/li&gt;
        &lt;li&gt;특정 I/O 작업을 하기 위한 준비가 되었는 지에 집중하는 것&lt;/li&gt;
        &lt;li&gt;I/O 작업 준비에 대한 이벤트 발생을 기다렸다가 해당 이벤트가 발생하면, 그에 따른 적합한 처리를 한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Blocking I/O
      &lt;ul&gt;
        &lt;li&gt;I/O가 끝날 때까지 대기해야 한다.
          &lt;ul&gt;
            &lt;li&gt;끝나기 전 까지는 함수가 반환(return)되지 않기 때문&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;커널이 작업을 완료하기 전까지 유저 프로세스는 작업을 중단한 채 대기해야 한다.&lt;/li&gt;
        &lt;li&gt;I/O 작업이 CPU 자원을 거의 쓰지 않기 때문에 blocking 방법은 CPU 자원 낭비가 심하다.
          &lt;ul&gt;
            &lt;li&gt;동기화 하기 위해 blocking 하는 것&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Synchronous vs. Blocking I/O
      &lt;ul&gt;
        &lt;li&gt;둘 다 시스템의 반환을 기다린다는 측면에서는 같은 개념
          &lt;ul&gt;
            &lt;li&gt;Synchronous: 시스템 반환을 기다리는 동안 대기 큐에 머무는 것이 필수가 아님&lt;/li&gt;
            &lt;li&gt;Blocking I/O: 시스템 반환을 기다리는 동안 대기 큐에 머무는 것이 필수&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;53-non-blocking-io-model&quot;&gt;&lt;strong&gt;5.3. Non-Blocking I/O Model&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/files/06fig02.gif&quot; alt=&quot;Alt text&quot; /&gt; &lt;br /&gt;
(출처: &lt;a href=&quot;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html&quot;&gt;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I/O 작업을 진행하는 동안 유저 프로세스의 작업을 중단시키지 않는다.&lt;/li&gt;
  &lt;li&gt;유저 프로세스가 I/O를 처리하기 위해 커널에 함수를 호출(System call)하면, 커널에서 함수의 진행사항과 상관없이 바로 결과를 반환한다.
    &lt;ul&gt;
      &lt;li&gt;반환되는 결과 = 반환하는 순간에 가져올 수 있는 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이렇게 되면 서버는 클라이언트가 요청한 사이즈에 맞는 데이터를 반환하게 위해 데이터를 축적해야 한다.
    &lt;ul&gt;
      &lt;li&gt;데이터의 축적이 끝났을 때 반환되어 클라이언트에서 요청한 사이즈의 데이터를 받아올 수 있게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이 구현의 문제점: 클라이언트가 따로 반환되는 값이 원하는 사이즈가 되었는 지 계속 확인해야 한다는 것(polling)
    &lt;ul&gt;
      &lt;li&gt;반환되는 데이터가 준비되었는 지 확인하는 과정에서 수많은 클라이언트의 요청이 동시다발적으로 일어날 경우, CPU에게 적지 않는 부담이 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;_※ Blocking vs. Non-blocking&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Blocking
      &lt;ul&gt;
        &lt;li&gt;애플리케이션 실행 시, 운영체제 대기 큐에 들어가면서 요청에 대한 System call이 완료된 후 응답을 보내는 것&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Non-blocking
      &lt;ul&gt;
        &lt;li&gt;애플리케이션 실행 시, 운영체제 대기 큐에 들어가지 않고 실행여부와 관계없이 바로 응답을 보내는 것&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;54-asynchronous-io-model&quot;&gt;&lt;strong&gt;5.4. Asynchronous I/O Model&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/files/06fig05.gif&quot; alt=&quot;Alt text&quot; /&gt; &lt;br /&gt;
(출처: &lt;a href=&quot;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html&quot;&gt;https://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch06lev1sec2.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(1) Event-driven Model&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Non-blocking I/O model에서 제기된 문제를 해결하기 위해 고안되었다.
    &lt;ul&gt;
      &lt;li&gt;Non-blocking I/O model에서처럼 애플리케이션 데이터가 준비되었는 지 계속 확인(polling)하는 것이 아니라, kernel level에서 데이터가 준비되면, 콜백 또는 이벤트를 발생시켜 애플리케이션에게 알리게 된다(notify).&lt;/li&gt;
      &lt;li&gt;User level에서 애플리케이션 스레드는 계속해서 데이터가 준비되었는 지 확인할 필요 없이 다음 작업을 수행하다가 커널에서 이벤틀가 발생하게 되면, 그 작업에 해당하는 일을 처리해주면 되는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Asynchronous&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;작업을 요청해놓고 딴 일을 하다가, 해당 작업이 완료되면 그 때 완료되었음을 통지받고(notify) 그에 따른 작업을 하는 것&lt;/li&gt;
  &lt;li&gt;I/O 작업의 completion을 기다린다.&lt;/li&gt;
  &lt;li&gt;운영체제 단계의 비동기 I/O를 통해 이루어지며, I/O 작업이 completion 되면, 그에 적합한 handler를 이용해 처리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;※ 정리&lt;/em&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Synchronous vs. Asynchronous
      &lt;ul&gt;
        &lt;li&gt;Synchronous: System call의 완료를 기다림&lt;/li&gt;
        &lt;li&gt;Asynchronous: Sytem call의 완료를 기다리지 않음&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Non-blocking vs. Asynchronous
      &lt;ul&gt;
        &lt;li&gt;Non-blocking: System call이 반환될 때 실행된 결과(데이터)와 함께 반환&lt;/li&gt;
        &lt;li&gt;Asynchronous: System call이 반환될 때 실행된 결과(데이터)와 함께 반환되지 않음&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;6-cpu-스케줄러&quot;&gt;&lt;strong&gt;6. CPU 스케줄러&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;61-critical-section임계영역&quot;&gt;&lt;strong&gt;6.1. Critical Section(임계영역)&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;동일한 자원을 동시에 접근하는 작업(e.g. 공유하는 변수 사용, 동일 파일을 사용하는 것 등)을 실행하는 코드 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공유 데이터를 동시에 접근하는 코드 영역&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;공유 데이터: 여러 프로세스들이 서로 공유할 수 있는 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;62-critical-section-problem임계영역-문제&quot;&gt;&lt;strong&gt;6.2. Critical Section Problem(임계영역 문제)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 임계영역 문제란?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;프로세스들이 Critical Section을 함께 사용할 수 있는 프로토콜을 설계하는 것
(2) 해결을 위한 기본 조건&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Mutual Exclusion(상호 배제)
    &lt;ul&gt;
      &lt;li&gt;프로세스 P1이 Critical Section에서 실행 중이라면, 다른 프로세스들은 P1이 가진 Critical Section에서 실행될 수 없다.&lt;/li&gt;
      &lt;li&gt;둘 이상의 프로세스가 동시에 공유데이터에 진입하는 것을 막는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Progress(진행)
    &lt;ul&gt;
      &lt;li&gt;Critical Section에서 실행 중인 프로세스가 없고 별도의 동작이 없는 프로세스들만 Critical Section 진입 후보로서 참여될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bounded Waiting(한정된 대기)
    &lt;ul&gt;
      &lt;li&gt;프로세스 P1이 Critical Section에 진입 신청한 후 부터 받아들여 질 때 까지, 다른 프로세스들이 Critical Section에 진입하는 횟수는 제한이 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;63-critical-section-problem의-해결책&quot;&gt;&lt;strong&gt;6.3. Critical Section Problem의 해결책&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) Lock&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;하드웨어 기반의 해결책&lt;/li&gt;
      &lt;li&gt;동시에 공유자원에 접근하는 것을 막기 위해, Critical Section에 진입하는 프로세스는 Lock을 획득하고, Critical Section을 빠져 나올 때, Lock을 방출함으로써 동시에 공유 자원에 접근하지 않도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;한계
    &lt;ul&gt;
      &lt;li&gt;다중 처리기 환경에서는 시간적인 효율성 측면에서 적용할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Semaphores(세마포어)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;소프트웨어 상에서 Critical Section 문제를 해결하기 위한 도구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;종류(OS는 Counting/Binary 세마포어를 구분함)
    &lt;ul&gt;
      &lt;li&gt;Counting 세마포어
        &lt;ul&gt;
          &lt;li&gt;가용한 개수를 가진 자원에 대한 접근 제어용으로 사용되며, 세마포어는 가용한 자원의 개수로 초기화된다.&lt;/li&gt;
          &lt;li&gt;자원을 사용하면 세마포어가 감소하고, 자원을 방출하면 세마포어는 증가한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Binary 세마포어
        &lt;ul&gt;
          &lt;li&gt;Mutex라고도 부르며, 상호배제(Mutex Exclusion)의 머릿글자를 따서 만들어졌다.&lt;/li&gt;
          &lt;li&gt;이름 그대로 0과 1 사이의 값만 가능&lt;/li&gt;
          &lt;li&gt;다중 프로세스들 사이의 Critical Section 문제를 해결하기 위해 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;Busy Wating(바쁜 대기)
        &lt;ul&gt;
          &lt;li&gt;Spin Lock 이라고 불리는 세마포어 초기 버전에서 Critical Section에 진입해야 하는 프로세스는 진입코드를 계속 반복 실행해야 하며, CPU 시간을 낭비했었다(특수한 상황이 아니면 비효율적).&lt;/li&gt;
          &lt;li&gt;해결책: 일반적으로는 세마포어에서 Critical Section에 진입을 시도했지만 실패한 프로세스를 block 시킨 뒤, Critical Section에 자리가 날 때 다시 깨우는 방식을 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Deadlock(교착상태)
        &lt;ul&gt;
          &lt;li&gt;세마포어가 Ready Queue를 가지고 있고 둘 이상의 프로세스가 Critical Section에 진입하려고 무한정 기다리고 있을 때, Critical Section에서 실행되는 프로세스는 진입 대기중인 프로세스가 실행되어야만 빠져나올 수 있는 상황&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 모니터&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고급 언어의 설계 구조물로서, 개발자의 코드를 상호배제 하게 끔 만든 추상화된 데이터 형태&lt;/li&gt;
  &lt;li&gt;공유자원에 접근하기 위한 키 획득과 자원 사용 후 해제를 모두 처리한다(세마포어는 직접 키 해제와 공유자원 접근 처리가 필요).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-메모리-관리-전략&quot;&gt;&lt;strong&gt;7. 메모리 관리 전략&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;71-메모리-관리-배경&quot;&gt;&lt;strong&gt;7.1. 메모리 관리 배경&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;각각의 프로세스는 독립된 메모리 공간을 갖지만, 운영체제 혹은 다른 프로세스의 메모리 공간에 접근할 수 없는 제한이 걸려 있다.
    &lt;ul&gt;
      &lt;li&gt;운영체제만이 운영체제 메모리 영역과 사용자 메모리 영역에 접근하는 것에 제약을 받지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) Swapping&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메모리 관리를 위해 사용되는 기법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Swap이란?&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;표준 Swapping 방식으로는 round-robin과 같은 스케줄링의 다중 프로그래밍 환경에서, CPU 할당 시간이 끝난 프로세스의 메모리를 보조 기억장치(e.g. 하드 디스크)로 보내고, 다른 프로세스의 메모리를 불러들일 수 있다.
        &lt;ul&gt;
          &lt;li&gt;swap-in: 주 기억장치(RAM)으로 불러오는 과정&lt;/li&gt;
          &lt;li&gt;swap-out: 보조 기억 장치로 내보내는 과정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;swap에는 큰 디스크 전송 시간이 필요하기 때문에 현재에는 메모리 공간이 부족할 때 swapping이 시작된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;72-메모리-단편화memory-fragmentation&quot;&gt;&lt;strong&gt;7.2. 메모리 단편화(Memory Fragmentation)&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메모리 관리 시 발생하는 문제&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로세스들이 메모리에 적재되고 제거되는 일이 반복되다 보면 프로세스들이 차지하는 메모리 틈 사이에 사용하지 못 할 만큼의 작은 자유 공간들이 늘어나게 되는 현상&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;외부 단편화
    &lt;ul&gt;
      &lt;li&gt;메모리 공간 중 사용하지 못하게 되는 일부분&lt;/li&gt;
      &lt;li&gt;물리 메모리(RAM)에서 사이사이 남는 공간들을 모두 합치면 충분한 공간이 되는 부분들이 분산되어 있을 때 발생&lt;/li&gt;
      &lt;li&gt;해결책: 압축작업
        &lt;ul&gt;
          &lt;li&gt;외부 단편화를 해소하기 위해 프로세스가 사용하는 공간들을 한 쪽으로 몰아 자유공간을 확보하는 방법론(작업 효율이 좋지 않음)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;내부 단편화
    &lt;ul&gt;
      &lt;li&gt;프로세스가 사용하는 메모리 공간에 포함된 남는 부분
        &lt;ul&gt;
          &lt;li&gt;메모리 분할 자유공간이 10,000B가 있고 Process A가 9,998B 사용하게 되면, 2B라는 차이가 존재하게 됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;73-메모리-단편화fragmentation-문제-해결책&quot;&gt;&lt;strong&gt;7.3. 메모리 단편화(Fragmentation) 문제 해결책&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) paging&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;하나의 프로세스가 사용하는 메모리 공간이 연속적이어야 한다는 제약을 없애는 메모리 관리 방법&lt;/li&gt;
      &lt;li&gt;외부 단편화의 압축작업을 해소하기 위해 생긴 방법론&lt;/li&gt;
      &lt;li&gt;물리 메모리는 Frame이라는 고정 크기로 분리되어 있고, 논리 메모리(프로세스가 점유하는)는 페이지라 불리는 고정 크기의 블록으로 분리된다.&lt;/li&gt;
      &lt;li&gt;하나의 프로세스가 사용하는 공간은 논리메모리에서 여러 개의 페이지로 나뉘어서 관리되고, 개별 페이지는 순서에 상관없이 물리 메모리에 있는 프레임에 mapping 되어 저장된다고 볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;페이징 기법을 사용함으로써, 논리 메모리는 물리 메모리에 저장될 때 연속해서 저장될 필요 없고, 물리 메모리의 남는 프레임에 적절히 배치됨으로써 외부 단편화를 해결할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;내부 단편화 문제의 비중이 늘어난다.&lt;/li&gt;
      &lt;li&gt;페이지의 크기가 1,024B이고 프로세스 A가 3,172B의 메모리를 요구한다면, 3개의 페이지 프레임(1024 * 3 = 3072) 하고도 100B가 필요하다
        &lt;ul&gt;
          &lt;li&gt;총 4개의 페이지 프레임이 필요하며, 4번째 프레임에는 924B(1024-100)의 여유 공간이 생기는 문제가 발생한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Segmentation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;페이징에서처럼 논리 메모리와 물리 메모리는 같은 크기의 블록이 아닌, 서로 다른 크기의 논리적 단위인 세그먼트(Segment)로 분할&lt;/li&gt;
      &lt;li&gt;사용자가 두개의 주소로 지정(세그먼트 번호 + 변위)&lt;/li&gt;
      &lt;li&gt;세그먼트 테이블에는 각 세그먼트 기준(세그먼트 시작 물리 주소)과 한계(세그먼트 길이)를 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;외부 단편화 문제 발생
        &lt;ul&gt;
          &lt;li&gt;서로 다른 크기의 세그먼트들이 메모리에 적재되고 제거되는 일이 반복되면, 자유 공간들이 많은 수의 조각들로 나뉘어져 못 쓰게 될 수도 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 메모리 풀(Pool)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;필요한 메모리 공간을 필요한 크기, 개수만큼 사용자가 직접 지정하여 미리 할당받아 놓고 필요할 때마다 사용하고 반납하는 기법&lt;/li&gt;
      &lt;li&gt;메모리의 할당, 해제가 잦은 경우에 효과적&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;외부 단편화가 발생하지 않음
        &lt;ul&gt;
          &lt;li&gt;메모리 풀 없이 동적할당과 해제를 반복하면 메모리의 랜덤한(실제로는 알고리즘에 의한) 위치에 할당과 해제가 반복되면서 단편화를 일으킬 수 있겠지만, 미리 공간을 할당해놓고 가져다 쓴 후 반납하기 때문에 할당과 해제로 인한 외부 단편화가 발생하지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;내부 단편화가 발생하지 않음
        &lt;ul&gt;
          &lt;li&gt;필요한 크기만큼 할당을 해놓기 때문에 내부 단편화가 발생하지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;메모리 단편화로 인한 메모리 낭비량보다 메모리 풀을 만들었지만 쓰지 않았을 때 메모리의 양이 커진다면 사용하지 않아야 한다.&lt;/li&gt;
      &lt;li&gt;미리 할당해놓고 사용하지 않을 때에도 계속 할당 해 놓기 때문에 메모리 누수 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot;&gt;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="CS" /><summary type="html">[목차]</summary></entry><entry><title type="html">[Java] 중괄호로 변수범위 정하기</title><link href="/Java-01" rel="alternate" type="text/html" title="[Java] 중괄호로 변수범위 정하기" /><published>2021-05-04T00:00:00+00:00</published><updated>2021-05-04T00:00:00+00:00</updated><id>/Java-01</id><content type="html" xml:base="/Java-01">&lt;p&gt;코드 중간에 뜬금포로 중괄호를 둔 코드를 누가 물어봤다.&lt;/p&gt;

&lt;p&gt;코드의 가독성을 좋게 하는 것도 있지만, 변수 범위를 정하기 위해 사용한다고 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;Java는 GC가 있는데 필요한 경우가 있을까? 생각해봐야겠다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고
(https://stackoverflow.com/questions/5466974/multiple-open-and-close-curly-brackets-inside-method-java)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">코드 중간에 뜬금포로 중괄호를 둔 코드를 누가 물어봤다.</summary></entry><entry><title type="html">[Spring boot] method parameter에 bean의 자동 주입</title><link href="/Spring-01" rel="alternate" type="text/html" title="[Spring boot] method parameter에 bean의 자동 주입" /><published>2021-05-04T00:00:00+00:00</published><updated>2021-05-04T00:00:00+00:00</updated><id>/Spring-01</id><content type="html" xml:base="/Spring-01">&lt;p&gt;요새 Spring boot에서 Spring batch로 Batch를 개발 중이다. &lt;br /&gt;
Job을 생성하고 있는데, 이 때 신기한 현상을 발견했다.
내가 만든 Job 생성 method에서는 수행할 Step을 parameter로 넘겨주고 있었는데, 해당 parameter명으로 Bean이 자동으로 주입되고 있었다!&lt;/p&gt;

&lt;p&gt;어떻게 된 것인지 내가 이해한 정도로만 정리했다.&lt;/p&gt;

&lt;p&gt;(지금 내가 테스트 하고 있는 완전 간단한 Job의 설정이다.)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job1Configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JobBuilderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StepBuilderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stepBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JOB1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JOB1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;STEP1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Step&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createStep1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stepBuilderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STEP1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tasklet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunckContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step1 is started&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RepeatStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FINISHED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;(1) ConstructorResolver.java에서 이름이 JOB1인 Bean을 생성하려고 한다.&lt;/p&gt;
&lt;figure&gt;
  &lt;figcaption&gt;ConstructorResolver.java&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateUsingFactoryMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explicitArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;BeanWrapperImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapperImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initBeanWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isStatic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryBeanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFactoryBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryBeanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanDefinitionStoreException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;factory-bean reference points back to the same bean definition&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;factoryBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ImplicitlyAppearedSingletonException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerDependentBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;factoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isStatic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2) Bean의 후보가 될 수 있는 candidates(여기서는 JOB1 Bean 한 개)에 대해서 for문을 돌게 된다. &lt;br /&gt;
(3) JOB1의 parameter는 한 개 이기 때문에 parameterCount는 1이 된다(minNrOfArgs 는 0).&lt;/p&gt;
&lt;figure&gt;
  &lt;figcaption&gt;ConstructorResolver.java&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiateUsingFactoryMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explicitArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Deque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UnsatisfiedDependencyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;causes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameterCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minNrOfArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ArgumentsHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argsHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;explicitArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Explicit arguments given -&amp;gt; arguments length must match exactly.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explicitArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;argsHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentsHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;explicitArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(4) createArgumetArray 메소드로 agrumentArray를 생성하게 된다.&lt;/p&gt;

&lt;p&gt;이 때, resolveAutowiredArgument 메소드로 autowiredArgument 객체를 생성하게 된다(실제로 얘를 나중에 parameter로 가져오는 듯).&lt;/p&gt;
&lt;figure&gt;
  &lt;figcaption&gt;ConstructorResolver.java&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autowireConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chosenCtors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explicitArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ArgumentsHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argsHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolvedValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstructorPropertiesChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;ParameterNameDiscoverer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterNameDiscoverer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;paramNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;argsHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createArgumentArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getUserDeclaredConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UnsatisfiedDependencyException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTraceEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ignoring constructor [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] of bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;': &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Swallow and try next constructor.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;causes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;causes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayDeque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;causes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentsHolder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createArgumentArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstructorArgumentValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnsatisfiedDependencyException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;TypeConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomTypeConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;TypeConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;ArgumentsHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentsHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstructorArgumentValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ValueHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usedValueHolders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredBeanNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredArgument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveAutowiredArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredBeanNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rawArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preparedArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredArgumentMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveNecessary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsatisfiedDependencyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InjectionPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(5) resolveAutowiredArgument 메소드에서는 beanFactory의 resolveDependency를 통해 param에 해당하는 Bean을 찾아오게 된다.&lt;/p&gt;
&lt;figure&gt;
  &lt;figcaption&gt;ConstructorResolver.java&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveAutowiredArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredBeanNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TypeConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InjectionPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAssignableFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;InjectionPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injectionPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentInjectionPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectionPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No current InjectionPoint available for &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injectionPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveDependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DependencyDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowiredBeanNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NoUniqueBeanDefinitionException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떻게 자동으로 주입되는지가 궁금해서 직접 찾아봤는데, 너무 깊게 찾아본 것 같기도..
Parameter의 type과 name만 있으면 Bean Factory에서 찾아주는 것 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;검색하면서 찾아본 글의 댓글에 있던 내용 참고하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 얘기로 스프링 4.3 이후부터는 생성자에 @Autowired를 쓰지 않아도 생성자의 파라미터 타입의 빈이 있으면 자동으로 주입해줍니다.
(출처: https://jeong-pro.tistory.com/167 [기본기를 쌓는 정아마추어 코딩블로그] )&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Spring" /><summary type="html">요새 Spring boot에서 Spring batch로 Batch를 개발 중이다. Job을 생성하고 있는데, 이 때 신기한 현상을 발견했다. 내가 만든 Job 생성 method에서는 수행할 Step을 parameter로 넘겨주고 있었는데, 해당 parameter명으로 Bean이 자동으로 주입되고 있었다!</summary></entry><entry><title type="html">[Spring boot] Datasource 여러개 사용하기</title><link href="/Spring-02" rel="alternate" type="text/html" title="[Spring boot] Datasource 여러개 사용하기" /><published>2021-05-04T00:00:00+00:00</published><updated>2021-05-04T00:00:00+00:00</updated><id>/Spring-02</id><content type="html" xml:base="/Spring-02">&lt;p&gt;Spring batch에서 두 개의 Datasource를 사용해야 하는 일이 생겼다. &lt;br /&gt;
내가 써야하는 Datasource는 Mysql, H2 memory DB 이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;1-datasource-설정&quot;&gt;&lt;strong&gt;1. dataSource 설정&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;application.yml 에 DataSource 설정을 추가한다.&lt;/p&gt;
&lt;figure&gt;
  &lt;figcaption&gt;application.yml&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hikari&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;driver-class-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mysql.cj.jdbc.Driver&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;jdbc-url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jdbc:mysql://localhost:3306/testdb&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hikari&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;driver-class-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.h2.Driver&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jdbc-url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jdbc:h2:mem:h2db&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sa&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-datasource-선언&quot;&gt;&lt;strong&gt;2. DataSource 선언&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;사용하려는 DataSource를 선언해 준다. &lt;br /&gt;
application.yml에 있는 spring.datasource.{??}.hikari 아래의 설정으로 dataSource를 가져온다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기본 dataSource는 mysql DB이다.&lt;/li&gt;
  &lt;li&gt;다른 dataSource는 h2 memory DB이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;figcaption&gt;DatasourceConfiguration.java&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatasourceConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Primary&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring.datasource.mysql.hikari&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMysqlDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSourceBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HikariDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;h2DataSource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring.datasource.h2.hikari&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createH2DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSourceBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HikariDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;3-datasource-사용&quot;&gt;&lt;strong&gt;3. DataSource 사용&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Primary Bean이 아닌 DataSource를 사용하려면 @Qualifier(name=”“)으로 가져온다.&lt;/p&gt;

&lt;p&gt;@Qualifier 설정을 안 하면 변수명이 Bean 이름과 같아도 자동으로 Primary Bean을 가져오게 된다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;나중에 TransactionManager나 SqlSessionFactory 등 더 필요한 DB 설정이 있다면 Vendor 별로 나누어서 Configuration 설정을 주는 것도 좋을 것 같다.&lt;/p&gt;</content><author><name></name></author><category term="Spring" /><summary type="html">Spring batch에서 두 개의 Datasource를 사용해야 하는 일이 생겼다. 내가 써야하는 Datasource는 Mysql, H2 memory DB 이다.</summary></entry></feed>