<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-05-25T17:08:23+00:00</updated><id>/feed.xml</id><title type="html">Dokongg Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Part 1-3. 네트워크</title><link href="/CS-Network" rel="alternate" type="text/html" title="Part 1-3. 네트워크" /><published>2021-05-24T00:00:00+00:00</published><updated>2021-05-24T00:00:00+00:00</updated><id>/CS-Network</id><content type="html" xml:base="/CS-Network">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTP GET/POST&lt;/strong&gt; &lt;br /&gt;
1.1. HTTP Request &lt;br /&gt;
1.2. HTTP Response &lt;br /&gt;
1.3. GET &lt;br /&gt;
1.4. POST&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TCP 3-way handshake&lt;/strong&gt; &lt;br /&gt;
2.1. TCP 3-way Handshake &amp;amp; 4-way Handshake &lt;br /&gt;
2.2. 2-way가 아닌 3-way Handshake를 사용하는 이유&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TCP와 UDP&lt;/strong&gt; &lt;br /&gt;
3.1. TCP/IP의 중요한 성질 &lt;br /&gt;
3.2. UDP(User Datagram Protocol, 사용자 데이터그램 프로토콜) &lt;br /&gt;
3.3. TCP(Transmission Control Protocol, 전송제어 프로토콜)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTP와 HTTPS&lt;/strong&gt; &lt;br /&gt;
4.1. HTTP의 문제점 &lt;br /&gt;
4.2. HTTPS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DNS Round Robin 방식&lt;/strong&gt; &lt;br /&gt;
5.1. DNS Round Robin 방식의 문제점 &lt;br /&gt;
5.2. DNS 스케줄링 알고리즘&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;웹 통신의 큰 흐름&lt;/strong&gt; &lt;br /&gt;
  6.1. in 브라우저 &lt;br /&gt;
  6.2. in 프로토콜 스택, LAN 어댑터 &lt;br /&gt;
  6.3. in 허브, 스위치, 라우터 &lt;br /&gt;
  6.4. in 액세스 회선, 프로바이더 &lt;br /&gt;
  6.5. in 방화벽, 캐시서버 &lt;br /&gt;
  6.6. in 웹서버&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-http의-get과-post-비교&quot;&gt;&lt;strong&gt;1. HTTP의 GET과 POST 비교&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;11-http-request&quot;&gt;&lt;strong&gt;1.1. HTTP Request&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;Request Line
*(( general-header | request-header | entity-header ) CRLF)
CRLF
[ message-body ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(1) Request Line &lt;br /&gt;
Method SP Request-URI SP HTTP-Version CRLF &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /index.html HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Method
    &lt;ul&gt;
      &lt;li&gt;OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, PATCH&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;REQUEST-URI&lt;/li&gt;
  &lt;li&gt;HTTP-Version
    &lt;ul&gt;
      &lt;li&gt;“HTTP” “/” 1*DIGIT “.” 1”DIGIT&lt;/li&gt;
      &lt;li&gt;HTTP/1.0, HTTP/1.1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CRLF
    &lt;ul&gt;
      &lt;li&gt;CR: carriage return(13)&lt;/li&gt;
      &lt;li&gt;LF: linefeed(10)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Headers &lt;br /&gt;
general-header, request-header, entity-header&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청에 따라 필요한 헤더만 사용&lt;/li&gt;
  &lt;li&gt;name: content 형식&lt;/li&gt;
  &lt;li&gt;General Header
    &lt;ul&gt;
      &lt;li&gt;Cache-Control, Connection, Date, Pragma, Trailer, Transfer-Enco, Upgrade, Via, Warning&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Request Header
    &lt;ul&gt;
      &lt;li&gt;Accept, Accept-Charset, Accept-Encoding, Accept-Language, Authorization, Expect, From, Host, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Max-Forwards, Proxy-Authorization, Range, Referer, TE, User-Agent 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Entity Header
    &lt;ul&gt;
      &lt;li&gt;Allow, Content-Encoding, Content-Language, Content-Length, Content-Location, Content-MD5, Content-Range, Content-Type, Expires, Last-Modified, extension-header&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;12-http-response&quot;&gt;&lt;strong&gt;1.2. HTTP Response&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;Status-Line
*(( general-header | response-header | entity-header ) CRLF )
CRLF
[ message-body ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(1) Status Line &lt;br /&gt;
HTTP-Version SP Status-Code SP Reason-Phrase CRLF &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/1.1 200 OK&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Status-Code
    &lt;ul&gt;
      &lt;li&gt;1xx: 정보성&lt;/li&gt;
      &lt;li&gt;2xx: 성공&lt;/li&gt;
      &lt;li&gt;3xx: 리다이렉트&lt;/li&gt;
      &lt;li&gt;4xx: 클라이언트 오류&lt;/li&gt;
      &lt;li&gt;5xx: 서버 오류&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;13-get&quot;&gt;&lt;strong&gt;1.3. GET&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;요청하는 데이터가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP Request Message&lt;/code&gt;의 Header 부분에 url이 담겨 전송된다.
    &lt;ul&gt;
      &lt;li&gt;url 상에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; 뒤에 데이터가 붙어 request를 보내게 된다.&lt;/li&gt;
      &lt;li&gt;url이라는 공간에 데이터가 담겨가기 때문에 전송할 수 있는 데이터의 크기가 제한적이다.&lt;/li&gt;
      &lt;li&gt;데이터가 그대로 url에 노출되므로 보안이 필요한 데이터에 대해서는 적절하지 않은 방식이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버에서 어떠한 데이터를 가져와 보여주는 용도이므로, 서버의 값이나 상태 등을 변경하지 않는다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;의 성격&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GET 방식의 요청은 브라우저에서 Caching 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;14-post&quot;&gt;&lt;strong&gt;1.4. POST&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP Request Message&lt;/code&gt;의 Body 부분에 데이터가 담겨서 전송된다.
    &lt;ul&gt;
      &lt;li&gt;바이너리 데이터를 요청하는 경우 POST 방식으로 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버의 값이나 상태를 변경 또는 추가하지 위해서 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-tcp-3-way-handshake&quot;&gt;&lt;strong&gt;2. TCP 3-way Handshake&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;21-tcp-3-way-handshake--4-way-handshake&quot;&gt;&lt;strong&gt;2.1. TCP 3-way Handshake &amp;amp; 4-way Handshake&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 연결 성립(Connection Establishment)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ars.els-cdn.com/content/image/3-s2.0-B0122272404001878-gr10.gif&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트가 서버에게 접속을 요청(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN&lt;/code&gt;)한다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 서버에게 접속을 요청하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN(a)&lt;/code&gt; 패킷을 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버가 클라이언트의 요청(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN&lt;/code&gt;)을 수락한 후, 확인 메시지(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN&lt;/code&gt;)을 보낸다.
    &lt;ul&gt;
      &lt;li&gt;서버는 클라이언트의 요청인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN(a)&lt;/code&gt;를 받은 후, 클라이언트에게 요청을 수락한다는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK(a+1)&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN(b)&lt;/code&gt;가 설정된 패킷을 발송한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트가 서버의 응답(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN&lt;/code&gt;)을 받아 다시 서버로 확인 메시지(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;)를 보낸다.
    &lt;ul&gt;
      &lt;li&gt;Client: 서버의 수락 메시지인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;(a+1)과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN&lt;/code&gt;(b) 패킷을 받고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;(b+1)을 서버로 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연결이 성립(establish)된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 연결 해제(Connection Termination)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F21201133536D8D992FC07A&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트가 연결을 종료하겠다는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIN 플래그&lt;/code&gt;를 전송한다.&lt;/li&gt;
  &lt;li&gt;서버는 클라이언트의 요청(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIN&lt;/code&gt;)을 받고 알겠다는 확인 응답(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;)를 보낸다.
    &lt;ul&gt;
      &lt;li&gt;데이터를 모두 보내기 전 까지 잠시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIME_OUT&lt;/code&gt;이 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터를 모두 보내고 통신이 끝난 후, 클라이언트에게 연결이 종료되었다는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIN 플래그&lt;/code&gt;를 전송한다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIN&lt;/code&gt; 메시지를 확인 했다는 메시지(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;)를 보낸다.&lt;/li&gt;
  &lt;li&gt;클라이언트의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt; 메시지를 받은 서버는 소켓 연결을 close 한다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 아직 서버로부터 받지 못한 데이터가 있을 것을 대비해 일정 시간 동안 세션을 남겨놓고 잉여 패킷을 기다리는 과정을 거친다(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIME_WAIT&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;SYN Packet과 ACK Packet&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;SYN(Synchronize Sequence Number)
ACK(Acknowledgement)&lt;/p&gt;

  &lt;p&gt;(1) TCP Header의 Code Bit(Flag bit)&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;6Bit로 구성되어 있으며, 각각의 bit들은 Urg-Ack-Psh-Rst-Syn-Fin 순서로 되어 있다.&lt;/li&gt;
    &lt;li&gt;해당 위치의 비트가 1이면, 해당 패킷이 어떠한 내용을 담고 있는 패킷인지를 나타낸다.
      &lt;ul&gt;
        &lt;li&gt;SYN: 000010&lt;/li&gt;
        &lt;li&gt;ACK: 010000&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(2) 두 종류의 Packet을 사용하는 이유&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;요청과 응답에 대한 패킷을 주고 받아야 하기 때문이다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(3) 임의의 sequence number를 사용하는 이유&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;처음 클라이언트에서 SYN 패킷을 보낼 때, Sequence Number에는 랜덤한 숫자가 담겨진다. 초기 sequence number를 ISN이라고 한다. ISN이 0부터 시작하지 않고 난수를 생성해서 number를 설정하게 된다.&lt;/li&gt;
    &lt;li&gt;Connection을 맺을 때 사용하는 포트(port)는 유한 범위 내에서 사용하고 시간이 지나면 재사용된다. 따라서 두 통신 호스트가 과거에 사용된 포트 번호 쌍을 사용할 가능성이 있다.
      &lt;ul&gt;
        &lt;li&gt;서버 특에서는 패킷의 SYN을 보고 패킷을 구분하게 되는데, 난수가 아닌 순차적인 number가 전송된다면 이전의 connection으로 부터 오는 패킷으로 인식할 수 있는 문제점이 있다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;22-2-way가-아닌-3-way-handshake를-사용하는-이유&quot;&gt;&lt;strong&gt;2.2. 2-way가 아닌 3-way Handshake를 사용하는 이유&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;TCP connection은 양방향성(bidirectional) 연결이기 때문에, 클라이언트가 서버에게 존재를 알리고 패킷을 보낼 수 있다는 것을 알리듯 서버 또한 클라이언트에게 존재를 알리고 패킷을 보낼 수 있다는 신호를 보내야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-tcp와-udp&quot;&gt;&lt;strong&gt;3. TCP와 UDP&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;31-tcpip의-중요한-성질&quot;&gt;&lt;strong&gt;3.1. TCP/IP의 중요한 성질&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) Connection oriented&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;두 개의 엔드포인트(로컬, 리모트) 사이에 연결을 먼저 맺고 데이터를 주고 받는다.&lt;/li&gt;
  &lt;li&gt;TCP 연결 식별자
    &lt;ul&gt;
      &lt;li&gt;두 엔드 포인트의 주소를 합친 것&lt;/li&gt;
      &lt;li&gt;&amp;lt;로컬 IP 주소, 로컬 포트번호, 리모트 IP 주소, 리모트 포트번호&amp;gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Bidirectional byte stream&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;양방향 데이터 통신을 하고, 바이트 스트림을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) In-order delivery&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;송신자(sender)가 보낸 순서대로 수신자(receiver)가 데이터를 받는다. 이를 위해서는 데이터의 순서가 필요하다. 순서를 표시하기 위해 32-bit 정수 자료형을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) Reliability through ACK&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 송신하고 수신자로부터 ACK(데이터 받았음)를 받지 않으면, 송신자 TCP가 데이터를 재전송 한다.
    &lt;ul&gt;
      &lt;li&gt;따라서 송신자 TCP는 수신자로부터 ACK를 받지 않은 데이터를 보관한다(buffer unacknowledged data).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) Flow control&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;송신자는 수신자가 받을 수 있는 만큼 데이터를 전송한다.
    &lt;ul&gt;
      &lt;li&gt;송신자는 수신자 receive window가 허용하는 바이트 수만큼 데이터를 전송한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수신자가 자신이 받을 수 있는 바이트 수 (사용하지 않은 버퍼 크기, receive window)를 송신자에게 전달한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(6) Congestion control&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크에 유입되는 데이터 양을 제한하려는 목적으로(네트워크 정체를 방지하기 위해) receive window와 별도로 congestion window를 사용한다.&lt;/li&gt;
  &lt;li&gt;receive window와 마찬가지로 congestion window가 허용하는 바이트 수 만큼의 데이터를 전송한다.
    &lt;ul&gt;
      &lt;li&gt;여기에는 TCP Vegas, Westwood, BIC, CUBIC 등의 다양한 알고리즘이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flow control과 달리 송신자가 단독으로 구현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;32-udpuser-datagram-protocol-사용자-데이터그램-프로토콜&quot;&gt;&lt;strong&gt;3.2. UDP(User Datagram Protocol, 사용자 데이터그램 프로토콜)&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;비연결형 프로토콜&lt;/li&gt;
  &lt;li&gt;IP 데이터그램을 캡슐화하여 보내는 방법과 연결 설정을 하지 않고 보내는 방법을 제공&lt;/li&gt;
  &lt;li&gt;흐름제어, 오류제어 또는 손상된 세그먼트의 수신에 대한 재전송을 하지 않는다.
    &lt;ul&gt;
      &lt;li&gt;사용자 프로세스의 몫이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;포트들을 사용하여 IP 프로토콜에 인터페이스를 제공한다.&lt;/li&gt;
  &lt;li&gt;클라이언트 - 서버 상황에서 특별히 유용하다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 서버로 짧은 요청을 보내고, 짧은 응답을 기대한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;코드가 간단할 뿐만 아니라, TCP처럼 초기설정(initial setup)이 요구되는 프로토콜보다 적은 메시지가 요구된다.
만약 요청 또는 응답이 손실된다면, 클라이언트는 time out 되고, 다시 시도할 수 있으면 된다.&lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;DNS
        &lt;ul&gt;
          &lt;li&gt;어떤 호스트 네임의 IP 주소를 찾아야 하는 프로그램은 DNS 서버로 호스트 네임을 포함한 UDP 패킷을 보낸다. 이 서버는 호스트의 IP 주소를 포함한 UDP 패킷을 응답한다.&lt;/li&gt;
          &lt;li&gt;사전에 설정이 필요하지 않으며, 그 후에 해제가 필요하지 않다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;33-tcptransmission-control-protocol-전송제어-프로토콜&quot;&gt;&lt;strong&gt;3.3. TCP(Transmission Control Protocol, 전송제어 프로토콜)&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;대부분의 인터넷 응용 분야들이 신뢰성과 순차적인 전달을 요구하는 필요성으로 인해 탄생&lt;/li&gt;
  &lt;li&gt;신뢰성이 없는 인터넷을 통해 종단간에 신뢰성 있는 바이트 스트림을 전송하도록 특별히 설계되었다.&lt;/li&gt;
  &lt;li&gt;송신자와 수신자 모두가 소켓이라고 부르는 종단점을 생성함으로써 이루어진다.&lt;/li&gt;
  &lt;li&gt;TCP에서 연결 설정(connection establishment)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3-way handshake&lt;/code&gt;를 통해 이루어진다.&lt;/li&gt;
  &lt;li&gt;모든 TCP 연결은 전이중(full-duplex), 점대점(point-to-point) 방식이다.
    &lt;ul&gt;
      &lt;li&gt;전이중(full-duplex): 전송이 양방향으로 동시에 일어날 수 있음&lt;/li&gt;
      &lt;li&gt;점대점(point-to-point): 각 연결이 정확히 2 개의 종단점을 가지고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;멀티캐스팅이나 브로드캐스팅을 지원하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-http와-https&quot;&gt;&lt;strong&gt;4. HTTP와 HTTPS&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;41-http의-문제점&quot;&gt;&lt;strong&gt;4.1. HTTP의 문제점&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP는 평문 통신이기 때문에 도청이 가능하다.&lt;/li&gt;
  &lt;li&gt;통신 상대를 확인하지 않기 때문에 위장이 가능하다.&lt;/li&gt;
  &lt;li&gt;완전성을 증명할 수 없기 때문에 변조가 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) TCP/IP는 도청 가능한 네트워크이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP 구조의 통신은 전부 통신 경로 상에서 엿볼 수 있다.
    &lt;ul&gt;
      &lt;li&gt;패킷을 수집하는 것만으로도 도청할 수 있다.&lt;/li&gt;
      &lt;li&gt;평문으로 통신을 할 경우, 메시지의 의미를 파악할 수 있기 때문에 암호화하여 통신해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보완 방법
    &lt;ul&gt;
      &lt;li&gt;통신 자체를 암호화
        &lt;ul&gt;
          &lt;li&gt;SSL(Secure Socket Layer) or TLS(Transport Layer Security)라는 다른 프로토콜을 조합함으로써 HTTP 통신 내용을 암호화할 수 있다(HTTPS, Http over SSL).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;콘텐츠를 암호화
        &lt;ul&gt;
          &lt;li&gt;HTTP를 사용해서 운반하는 내용인, HTTP 메시지에 포함되는 콘텐츠만 암호화하는 것이다.&lt;/li&gt;
          &lt;li&gt;암호화해서 전송하면 받은 측에서는 그 암호를 해독하여 출력하는 처리가 필요하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 통신 상대를 확인하지 않기 때문에 위장이 가능하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP에 의한 통신에서는 상대가 누구인지 확인하는 처리가 없기 때문에 누구든지 request를 보낼 수 있다.&lt;/li&gt;
  &lt;li&gt;IP 주소나 포트 등에서 그 웹 서버에 액세스 제한이 없는 경우, request가 오면 상대가 누구든지 무언가의 response를 반환한다.&lt;/li&gt;
  &lt;li&gt;문제점
    &lt;ul&gt;
      &lt;li&gt;리퀘스트를 보낸 곳의 웹 서버가 원래 의도한 response를 보내야 하는 웹 서버인지를 확인할 수 없다.&lt;/li&gt;
      &lt;li&gt;response를 반환한 곳의 클라이언트가 원래 의도한 request를 보낸 클라이언트인지 확인할 수 없다.&lt;/li&gt;
      &lt;li&gt;통신하고 있는 상대가 접근이 허가된 상대인지를 확인할 수 없다.&lt;/li&gt;
      &lt;li&gt;어디에서 누가 request 했는 지 확인할 수 없다.&lt;/li&gt;
      &lt;li&gt;의미없는 request도 수신한다(Dos 공격을 방지할 수 없다).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보완 방법
    &lt;ul&gt;
      &lt;li&gt;SSL 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;SSL&lt;/strong&gt; &lt;br /&gt;
상대를 확인하는 수단으로 증명서를 제공한다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;증명서는 신뢰할 수 있는 제 3자 기관에 의해 발행되는 것이기 때문에, 서버나 클라이언트가 실재한다는 사실을 증명한다.&lt;/li&gt;
    &lt;li&gt;이 증명서를 이용함으로써 통신 상대가 내가 통신하고자 하는 서버임을 나타내고 이용자는 개인 정보 누설 등의 위험성이 줄어들게 된다.&lt;/li&gt;
    &lt;li&gt;이 증명서로 본인 확인을 하고 웹 사이트 인증에서도 이용할 수 있다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(3) 완전성을 증명할 수 없기 때문에 변조가 가능하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;완전성: 정보의 정확성&lt;/li&gt;
  &lt;li&gt;서버 또는 클라이언트에서 수신한 내용이 송신측에서 보낸 내용과 일치한다는 것을 보장할 수 없다.&lt;/li&gt;
  &lt;li&gt;request나 response가 발신되고 나서 상대가 수신하는 사이에 누군가에 의해 변조되어도 이를 알 수 없다.
    &lt;ul&gt;
      &lt;li&gt;중간자 공격(Main-in-the-Middle): 공격자가 도중에 request나 response를 빼앗아 변조하는 공격&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보완 방법
    &lt;ul&gt;
      &lt;li&gt;HTTPS 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;42-https&quot;&gt;&lt;strong&gt;4.2. HTTPS&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;HTTP에 암호화와 인증, 그리고 완전성 보호를 더한 HTTPS&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SSL의 껍질을 덮어쓴 HTTPS
    &lt;ul&gt;
      &lt;li&gt;새로운 애플리케이션 계층의 프로토콜이 아니다.&lt;/li&gt;
      &lt;li&gt;HTTP 통신하는 소켓 부분을 SSL(Secure Socket Layer) or TLS(Transport Layer Security)라는 프로토콜으로 대체하는 것 뿐이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP와 직접 통신하는 HTTP와 다르게, HTTPS에서 HTTP는 SSL과 통신하게 되고 이 SSL이 TCP와 통신하게 된다.&lt;/li&gt;
  &lt;li&gt;SSL을 사용한 HTTPS는 암호화와 증명서, 안전성 보호를 이용할 수 있게 된다.&lt;/li&gt;
  &lt;li&gt;HTTPS의 SSL에서는 공통키 암호화 방식과 공개키 암호화 방식을 혼합한 하이브리드 암호 시스템을 이용한다.
    &lt;ul&gt;
      &lt;li&gt;공통키를 공개키 암호화 방식으로 교환한 다음에 그 이후의 통신은 공통키 암호를 사용하는 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-dns-round-robin-방식&quot;&gt;&lt;strong&gt;5. DNS Round Robin 방식&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;51-dns-round-robin-방식의-문제점&quot;&gt;&lt;strong&gt;5.1. DNS Round Robin 방식의 문제점&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;서버의 수 만큼 공인 IP 주소가 필요하다.
    &lt;ul&gt;
      &lt;li&gt;부하 분산을 위해 서버의 대수를 늘리려면 그 만큼의 공인 IP가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;균등하게 분산되지 않는다.
    &lt;ul&gt;
      &lt;li&gt;스마트폰의 접속은 캐리어 게이트웨이라고 하는 프록시 서버를 공유한다. 프록시 서버에는 이름변환 결과가 일정 시간 동안 캐싱되므로, 같은 프록시 서버를 경유하는 접속은 항상 같은 서버로 접속된다.&lt;/li&gt;
      &lt;li&gt;PC용 웹 브라우저도 DNS 질의 결과를 캐싱하기 때문에 균등하게 부하분산 되지 않는다.
        &lt;ul&gt;
          &lt;li&gt;DNS 레코드의 TTL 값을 짧게 설정함으로써 어느 정도 해소가 되지만, TTL에 따라 캐시를 해제하는 것은 아니므로 반드시 주의가 필요하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버가 다운되도 확인 불가하다.
    &lt;ul&gt;
      &lt;li&gt;DNS 서버는 웹 서버의 부하나 접속 수 등의 상황에 따라 질의 결과를 제어할 수 없다.&lt;/li&gt;
      &lt;li&gt;웹 서버의 부하가 높아서 응답이 느려지거나 접속 수가 꽉 차서 접속을 처리할 수 없는 상황인지를 전혀 감지할 수 없기 때문에 어떠한 원인으로 다운되더라도 이를 검출하지 못하고 유저들에게 제공한다.
        &lt;ul&gt;
          &lt;li&gt;이 때문에 유저들은 간혹 다운된 서버로 연결이 되기도 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;52-dns-스케줄링-알고리즘&quot;&gt;&lt;strong&gt;5.2. DNS 스케줄링 알고리즘&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) Weighted Round Robin(WRR)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;각각의 웹 서버에 가중치를 가미해서 분산 비율을 변경한다.&lt;/li&gt;
  &lt;li&gt;가중치가 큰 서버일수록 빈번하게 선택되므로, 처리 능력이 높은 서버는 높게 설정하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Least connection&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;접속 클라이언트의 수가 가장 적은 서버를 선택한다.&lt;/li&gt;
  &lt;li&gt;로드밸런서에서 실시간으로 connection 수를 관리하거나 각 서버에서 주기적으로 알려주는 것이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-웹-통신의-큰-흐름&quot;&gt;&lt;strong&gt;6. 웹 통신의 큰 흐름&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Chrome을 실행시켜 주소창에 특정 URL 값을 입력했을 때 일어나는 일&lt;/p&gt;

&lt;h5 id=&quot;61-in-브라우저&quot;&gt;&lt;strong&gt;6.1. in 브라우저&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;url에 입력된 값을 브라우저 내부에서 결정된 규칙에 따라 그 의미를 조사한다.&lt;/li&gt;
  &lt;li&gt;조사된 의미에 따라 HTTP Request 메시지를 만든다.&lt;/li&gt;
  &lt;li&gt;만들어진 메시지를 웹 서버로 전송한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 때 만들어진 메시지 전송은 브라우저가 직접하는 것이 아니다. 브라우저는 메시지를 네트워크에 송출하는 기능이 없으므로, OS에 의뢰하여 메시지를 전달한다. &lt;br /&gt;
단, OS에 송신을 의뢰할 때는 도메인 명이 아니라 ip 주소로 메시지를 받을 상대를 지정해야 하는데, 이 과정에서 DNS 서버를 조회해야 한다.&lt;/p&gt;

&lt;h5 id=&quot;62-in-프로토콜-스택-lan-어댑터&quot;&gt;&lt;strong&gt;6.2. in 프로토콜 스택, LAN 어댑터&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;프로토콜 스택(운영체제에 내장된 네트워크 제어용 소프트웨어)이 브라우저로부터 메시지를 받는다.&lt;/li&gt;
  &lt;li&gt;브라우저로부터 받은 메시지를 패킷 속에 저장한다.&lt;/li&gt;
  &lt;li&gt;수신처 주소 등의 제어정보를 덧붙인다.&lt;/li&gt;
  &lt;li&gt;패킷을 LAN 어댑터에 넘긴다.&lt;/li&gt;
  &lt;li&gt;LAN 어댑터는 다음 Hop의 MAC 주소를 붙인 프레임을 전기신호로 변환시킨다.&lt;/li&gt;
  &lt;li&gt;신호를 LAN 케이블에 송출시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로토콜 스택은 통신 중 오류가 발생했을 때, 이 제어 정보를 사용하여 고쳐 보내거나 각종 상황을 조절하는 등 다양한 역할을 하게 된다. &lt;br /&gt;
네트워크 세계에는 비서가 있어서 우리가 비서에게 물건만 건네주면, 받는 사람의 주소와 각종 유의사항을 써준다(프로토콜 스택 = 비서).&lt;/p&gt;

&lt;h5 id=&quot;63-in-허브-스위치-라우터&quot;&gt;&lt;strong&gt;6.3. in 허브, 스위치, 라우터&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;LAN 어댑터가 송신한 프레임은 스위칭 허브를 경유하여 인터넷 접속용 라우터에 도착한다.&lt;/li&gt;
  &lt;li&gt;라우터는 패킷을 프로바이더(통신사)에게 전달한다.&lt;/li&gt;
  &lt;li&gt;인터넷으로 들어가게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;64-in-액세스-회선-프로바이더&quot;&gt;&lt;strong&gt;6.4. in 액세스 회선, 프로바이더&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;패킷은 인터넷의 입구에 있는 액세스 회선(통신 회선)에 의해 POP(Point Of Presence, 통신사용 라우터)까지 운반된다.&lt;/li&gt;
  &lt;li&gt;POP를 거쳐 인터넷의 핵심부로 들어가게 된다.&lt;/li&gt;
  &lt;li&gt;수 많은 고속 라우터들 사이로 패킷이 목적지를 향해 흘러가게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;65-in-방화벽-캐시서버&quot;&gt;&lt;strong&gt;6.5. in 방화벽, 캐시서버&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;패킷은 인터넷 핵심부를 통과하여 웹 서버측의 LAN에 도착한다.&lt;/li&gt;
  &lt;li&gt;기다리고 있던 방화벽이 도착한 패킷을 검사한다.&lt;/li&gt;
  &lt;li&gt;패킷이 웹 서버까지 가야하는지, 아니면 말아야 하는 지를 판단하는 캐시서버가 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;굳이 서버까지 가지 않아도 되는 경우를 골라낸다. 액세스 한 페이지의 데이터가 캐시서버에 있으면 웹 서버에 의뢰하지 않고도 바로 그 값을 읽을 수 있다. 페이지의 데이터 중에 다시 이용할 수 있는 것이 있으면 캐시 서버에 저장한다.&lt;/p&gt;

&lt;h5 id=&quot;66-in-웹서버&quot;&gt;&lt;strong&gt;6.6. in 웹서버&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;패킷이 물리적인 웹 서버에 도착하면, 웹 서버의 프로토콜 스택은 패킷을 추출하여 메시지를 복원하고 웹 서버 애플리케이션에게 넘긴다.&lt;/li&gt;
  &lt;li&gt;메시지를 받은 웹 서버 애플리케이션은 요청 메시지에 따른 데이터를 응답 메시지에 넣어 클라이언트로 회송한다.&lt;/li&gt;
  &lt;li&gt;왔던 방식대로 응답 메시지가 클라이언트에게 전달된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot;&gt;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/888&quot;&gt;https://blog.outsider.ne.kr/888&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://asfirstalways.tistory.com/356&quot;&gt;https://asfirstalways.tistory.com/356&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/47667&quot;&gt;https://d2.naver.com/helloworld/47667&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="CS" /><summary type="html">HTTP GET/POST 1.1. HTTP Request 1.2. HTTP Response 1.3. GET 1.4. POST</summary></entry><entry><title type="html">[책 - 자바 ORM 표준 JPA 프로그래밍] 03. 영속성 관리</title><link href="/JPA-01" rel="alternate" type="text/html" title="[책 - 자바 ORM 표준 JPA 프로그래밍] 03. 영속성 관리" /><published>2021-05-16T00:00:00+00:00</published><updated>2021-05-16T00:00:00+00:00</updated><id>/JPA-01</id><content type="html" xml:base="/JPA-01">&lt;p&gt;&lt;a href=&quot;https://dokongg.tistory.com/1&quot;&gt;https://dokongg.tistory.com/1&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="JPA" /><summary type="html">https://dokongg.tistory.com/1</summary></entry><entry><title type="html">[책 - 자바 ORM 표준 JPA 프로그래밍] 04. 엔티티 매핑</title><link href="/JPA-02" rel="alternate" type="text/html" title="[책 - 자바 ORM 표준 JPA 프로그래밍] 04. 엔티티 매핑" /><published>2021-05-16T00:00:00+00:00</published><updated>2021-05-16T00:00:00+00:00</updated><id>/JPA-02</id><content type="html" xml:base="/JPA-02">&lt;p&gt;&lt;a href=&quot;https://dokongg.tistory.com/2&quot;&gt;https://dokongg.tistory.com/2&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="JPA" /><summary type="html">https://dokongg.tistory.com/2</summary></entry><entry><title type="html">[Java] Lambda</title><link href="/Java-lambda" rel="alternate" type="text/html" title="[Java] Lambda" /><published>2021-05-13T00:00:00+00:00</published><updated>2021-05-13T00:00:00+00:00</updated><id>/Java-lambda</id><content type="html" xml:base="/Java-lambda">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lambda&lt;/strong&gt; &lt;br /&gt;
1.1. Lambda란 &lt;br /&gt;
1.2. Lambda의 장단점 &lt;br /&gt;
1.3. Lambda의 기본식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;타겟 타입(Target Type)&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;함수형 인터페이스(functional Interface)&lt;/strong&gt; &lt;br /&gt;
3.1. 함수형 인터페이스란 &lt;br /&gt;
3.2. 내장 함수형 인터페이스&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;메서드 레퍼런스(Method Reference&lt;/strong&gt; &lt;br /&gt;
4.1. 메서드 레퍼런스란 &lt;br /&gt;
4.2. 메서드 레퍼런스의 종류&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;활용예시&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Stream&lt;/strong&gt; &lt;br /&gt;
6.1. Stream이란 &lt;br /&gt;
6.2. Stream의 특징 &lt;br /&gt;
6.3. 병렬처리&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-lambda&quot;&gt;&lt;strong&gt;1. Lambda&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;11-lambda란&quot;&gt;&lt;strong&gt;1.1. Lambda란?&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) Lambda의 정의&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메서드를 하나의 식(Expression)으로 표현한 것&lt;/li&gt;
  &lt;li&gt;익명 메서드(익명 함수, Anonymous functions) 생성 문&lt;/li&gt;
  &lt;li&gt;메서드 자체로 혼자 선언하여 쓰일 수 없다.
    &lt;ul&gt;
      &lt;li&gt;무조건 Class 구성멤버로서 선언되어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lambda식을 통해 생성되는 것은 메서드 자체가 아닌 실행문(메서드)를 가진 객체이다.
    &lt;ul&gt;
      &lt;li&gt;일반적인 객체가 아닌 인터페이스를 구현한 익명구현객체를 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Lambda의 특징&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;익명 함수이므로, 이름을 가질 필요가 없다&lt;/li&gt;
  &lt;li&gt;두 개 이상의 입력이 있는 함수는 최종적으로 1개의 입력만 받는 람다 대수로 단순화 될 수 있다(커링, Curring).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;익명 함수(Anonymous functions)&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;이름이 없는 함수&lt;/li&gt;
    &lt;li&gt;일급객체(First Class citizen)이라는 특징을 지님
      &lt;ul&gt;
        &lt;li&gt;일급객체
          &lt;ul&gt;
            &lt;li&gt;일반적으로 다른 객체들에 적용 가능한 연산을 모두 지원하는 객체를 말함&lt;/li&gt;
            &lt;li&gt;함수를 값으로도 사용할 수 있고, 파라미터로 전달 및 변수에 대입하기 등의 연산이 가능&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(3) interface와 익명 클래스&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Calculator라는 인터페이스는 cal()이라는 추상메서드를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;Calculator를 객체화하는 방법
    &lt;ul&gt;
      &lt;li&gt;implements한 class를 생성&lt;/li&gt;
      &lt;li&gt;익명 클래스로 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;인터페이스를 익명 클래스 방식으로 인스턴스화&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;인터페이스는 인터페이스 자체로 구현체(객체)를 만들 수 없지만, 인터페이스의 추상 메서드를 생성과 동시에 중괄호 {}로 감싼 곳에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Override&lt;/code&gt;하여 구현할 수 있다.&lt;/li&gt;
    &lt;li&gt;cal() 메서드를 가진 Calculator 인터페이스를 익명클래스 방식으로 인스턴스화&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 생성과 동시에 구현할 메서드를 @Override함&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;12-lambda의-장단점&quot;&gt;&lt;strong&gt;1.2. Lambda의 장단점&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) Lambda의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;코드의 간결성
    &lt;ul&gt;
      &lt;li&gt;불필요한 반복문을 삭제할 수 있으며, 복잡한 식을 단순하게 표현할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;지연연산 수행
    &lt;ul&gt;
      &lt;li&gt;지연연산을 수행함으로써 불필요한 연산을 최소화할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;병렬처리 가능
    &lt;ul&gt;
      &lt;li&gt;멀티 스레드를 활용하여 병렬처리를 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;지연연산(지연실행, Lazy Evaluation)&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;코드를 바로 실행하지 않고 코드 실행이 필요할 때 실행하도록 하는 것&lt;/li&gt;
    &lt;li&gt;불필요한 연산을 피할 수 있다.
      &lt;ul&gt;
        &lt;li&gt;별도의 스레드에서 코드를 실행&lt;/li&gt;
        &lt;li&gt;코드를 여러 번 실행&lt;/li&gt;
        &lt;li&gt;적절한 시점에 실행&lt;/li&gt;
        &lt;li&gt;어떤 일(이벤트)이 발생했을 때 실행&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(2) Lambda의 단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;호출이 까다롭다.&lt;/li&gt;
  &lt;li&gt;Lambda의 stream을 사용했을 때, 단순 for문 혹은 while문을 사용하면 성능이 떨어진다.&lt;/li&gt;
  &lt;li&gt;불필요하게 과도하게 사용하면 오히려 가독성이 떨어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;13-lambda의-기본식&quot;&gt;&lt;strong&gt;1.3. Lambda의 기본식&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(매개변수) -&amp;gt; { 실행문 }&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;매개변수로 화살표(-&amp;gt;) 함수 몸체로 이용하여 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;매개변수의 타입을 자동으로 인식하기 때문에 변수 타입을 삭제할 수 있다.&lt;/li&gt;
  &lt;li&gt;매개변수가 하나 일 때 ()를 생략할 수 있다.&lt;/li&gt;
  &lt;li&gt;함수 몸체가 단일 실행문이면 중괄호 {}를 생략할 수 있다.&lt;/li&gt;
  &lt;li&gt;함수 몸체가 return문으로만 구성되어 있는 경우 중괄호 {}를 생략할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 1. (매개변수) -&amp;gt; { 구현로직 }&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 2. 매개변수의 타입을 자동으로 인식하기 때문에 변수 타입을 삭제할 수 있다.&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 3. 매개변수가 하나 일 때 ()를 생략할 수 있다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (두 개 이상 혹은 없을 때에는 필요)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 4. 로직이 한 줄 안에 끝나는 경우 {}과 return을 제거할 수 있다.&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;람다식의 매개변수는 final 키워드가 붙지 않더라도 불변하는 상수로 취급한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ERROR! 매개변수를 변경시키려 했기 때문&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-타겟-타입target-type&quot;&gt;&lt;strong&gt;2. 타겟 타입(Target type)&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;람다식이 대입되는 인터페이스 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인터페이스(타겟 타입) 변수 = 람다식;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;익명 구현 객체를 만들 때 사용할 인터페이스&lt;/li&gt;
  &lt;li&gt;람다식에서 생성되는 익명구현객체는 기반이 되는 interface의 타입을 갖는다.
    &lt;ul&gt;
      &lt;li&gt;람다식의 타겟 타입은 Calculator이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-함수형-인터페이스functional-interface&quot;&gt;&lt;strong&gt;3. 함수형 인터페이스(functional interface)&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;31-함수형-인터페이스란&quot;&gt;&lt;strong&gt;3.1. 함수형 인터페이스란&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 추상 메서드만 선언된 인터페이스
    &lt;ul&gt;
      &lt;li&gt;컴파일러는 람다식을 해석하여 자동으로 익명구현객체로 만든다. &lt;br /&gt;
이 때, 람다식의 타겟 타입이 될 인터페이스는 컴파일러가 해당 람다식이 타겟 타입의 어떤 메서드를 구현한 것인지 알 수 없기 때문에 2개 이상의 추상 메서드를 가지면 안된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 인터페이스가 람다식의 타겟 타입이 될 수 있는 것은 아니다.
    &lt;ul&gt;
      &lt;li&gt;람다식은 하나의 메서드를 정의하기 때문에, 나의 추상 메서드가 선언된 인터페이스만 타겟 타입이 될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@FunctionalInterface&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;하나의 추상 메서드만을 가지는 지 컴파일러가 체크하도록 한다.
        &lt;ul&gt;
          &lt;li&gt;두 개 이상의 추상 메서드가 선언되어 있으면 컴파일 오류 발생&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ERROR!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;32-내장-함수형-인터페이스&quot;&gt;&lt;strong&gt;3.2. 내장 함수형 인터페이스&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;함수형 인터페이스는 개발자가 직접 만들어 사용할 수도 있지만, 자바에서 제공하는 표준 인터페이스를 사용해 람다식으로 구현할 수도 있다.
    &lt;ul&gt;
      &lt;li&gt;아래 코드의 IntBinaryOperator는 BinaryOperator 종류의 표준 함수형 인터페이스이다.&lt;/li&gt;
      &lt;li&gt;IntBinaryOperator는 두 개의 정수를 매개변수로 받아 정수값을 리턴해주는 추상메서드 applyAsInt()를 갖고 있다.
        &lt;ul&gt;
          &lt;li&gt;람다식은 두 개의 정수를 매개변수로 받아 둘 중 큰 값을 반환해준다.&lt;/li&gt;
          &lt;li&gt;기존의 Math 클래스의 max()를 사용해도 같은 결과를 얻을 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) 기본 함수형 인터페이스&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;매개변수의 반환값 유무에 따라 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Function과 Predicate의 차이는 반환 값이 boolean이라는 것만 다르고 Function과 동일 &lt;br /&gt;
(T: 데이터 타입, R: 리턴 타입)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수형 인터페이스&lt;/th&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th&gt;매개변수&lt;/th&gt;
      &lt;th&gt;반환값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;java.lang.Runnable&lt;/td&gt;
      &lt;td&gt;void run()&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Supplier&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;T get()&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Consumer&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;void accept(T t)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Function&amp;lt;T, R&amp;gt;&lt;/td&gt;
      &lt;td&gt;void accept(T t)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Predicate&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;boolean test(T t)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Supplier&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// String;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Consumer&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Function&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Predicate&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2) 매개변수가 두 개인 함수형 인터페이스&lt;/p&gt;

&lt;p&gt;(T/U: 데이터 타입, R: 리턴 타입)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수형 인터페이스&lt;/th&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th&gt;매개변수&lt;/th&gt;
      &lt;th&gt;반환값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BiConsumer&amp;lt;T, U&amp;gt;&lt;/td&gt;
      &lt;td&gt;void accept(T t, U u)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BiFunction&amp;lt;T, U, R&amp;gt;&lt;/td&gt;
      &lt;td&gt;R apply(T t, U u)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BiPredicate&amp;lt;T, U&amp;gt;&lt;/td&gt;
      &lt;td&gt;boolean test(T t, U u)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// BiConsumer&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;BiConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biConsumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;biConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// BiFunction&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// BiPredicate&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;BiPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(3) 매개변수 타입과 반환 타입이 일치하는 함수형 인터페이스&lt;/p&gt;

&lt;p&gt;(T/U: 데이터 타입, R: 리턴 타입)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수형 인터페이스&lt;/th&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th&gt;매개변수&lt;/th&gt;
      &lt;th&gt;반환값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;UnaryOperator&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;T apply(T t)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BinaryOperator&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;T apply(T t, T t)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// UnaryOperator&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;UnaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unaryOperator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// BinaryOperator&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;BinaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binaryOperator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-메서드-레퍼런스method-reference&quot;&gt;&lt;strong&gt;4. 메서드 레퍼런스(Method Reference)&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;41-메서드-레퍼런스란&quot;&gt;&lt;strong&gt;4.1. 메서드 레퍼런스란&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Lambda의 표현식을 더 간단하게 표현하는 방법
    &lt;ul&gt;
      &lt;li&gt;람다 표현식이 단 하나의 메서드를 호출하는 경우, 해당 람다 표현식에서 불필요한 매개변수를 제거하고 사용 할 수 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:: 기호를 사용하여 표현한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스 이름::메서드 이름&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;참조변수 이름::메서드 이름&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;이미 구현되어 있는 메서드를 참조해 매개변수의 정보와 리턴 타입을 알아내어 불필요한 매개변수를 제거하는 것이 목적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Math:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;42-메서드-레퍼런스의-종류&quot;&gt;&lt;strong&gt;4.2. 메서드 레퍼런스의 종류&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;정적 메서드, 인스턴스 메서드 참조&lt;/li&gt;
  &lt;li&gt;매개변수의 메서드 참조&lt;/li&gt;
  &lt;li&gt;생성자 참조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) 정적 메서드, 인스턴스 메서드 참조&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Math:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;max()가 Math 클래스의 정적 메서드이기 때문에, 정적(static) 메서드 참조방식이 된다.&lt;/li&gt;
  &lt;li&gt;인스턴스 메서드인 경우에는 인스턴스를 생성한 후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인스턴스::메서드명&lt;/code&gt;으로 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myMath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;IntBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;myMath:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2) 매개변수의 메서드 참조 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;매개변수 타입::메서드&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;매개변수로 받은 인자의 메서드를 참조하는 방식&lt;/li&gt;
  &lt;li&gt;ToIntBiFunction은 Function 인터페이스 중 하나로서, 두 개의 매개변수를 받아 람다식의 로직을 사용하여 applyAsInt()를 사용했을 때 int 타입을 반환해주는 함수형 인터페이스이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;ToIntBiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;ToIntBiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(3) 생성자 참조 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스명::new&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;생성자 또한 일종의 메서드이기 때문에 메서드 레퍼런스로 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 넘어오는 매개변수의 개수로 어떤 생성자를 호출할 지 찾아줌&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dom, 28&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5-활용예시&quot;&gt;&lt;strong&gt;5. 활용예시&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;자바에서 변수의 역할을 할 수 있는 것은 Primitive 타입(int, long, boolean 등)과 Object 타입이다.
    &lt;ul&gt;
      &lt;li&gt;람다식을 만들 수 있는 타겟 타입도 변수가 될 수 있으므로, 람다식과 활용하면 메소드도 매개변수처럼 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;메소드를 구현한 함수적 인터페이스를 변수로 사용하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수적 인터페이스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; 와 정수 n을 매개변수로 받아 calc()의 실행 결과를 출력해주는 printCalc()라는 메소드가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printCalc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;6-stream&quot;&gt;&lt;strong&gt;6. Stream&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;61-stream이란&quot;&gt;&lt;strong&gt;6.1. Stream이란&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;컬렉션(Collection)의 요소를 하나씩 참조하여 람다식으로 처리할 수 있게 해주는 일종의 반복자&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Java의 Collection과 Iterator&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://www.javatpoint.com/images/java-collection-hierarchy.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;자바의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt; 인터페이스는 Set, List, Queue 인터페이스 처럼 데이터를 저장하는 자료구조들의 상위에 있는 인터페이스이다.
      &lt;ul&gt;
        &lt;li&gt;최상위에는 iterator() 메소드를 갖고 있는 Iterable 인터페이스가 있다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Collection을 implements한 모두 자료 구조들은 iterator()로 반복자를 만들어 반복문을 돌릴 수 있다.
      &lt;ul&gt;
        &lt;li&gt;iterator()는 Iterator&lt;T&gt;를 반환한다.&lt;/T&gt;&lt;/li&gt;
        &lt;li&gt;hasNext() 메소드와 next() 메소드를 갖고 있다.
          &lt;ul&gt;
            &lt;li&gt;hasNext(): 자료 안에 자료가 있는지 없는지 확인&lt;/li&gt;
            &lt;li&gt;next(): 자료구조에 저장되어 있는 자료를 하나씩 리턴&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;steam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;62-stream의-특징&quot;&gt;&lt;strong&gt;6.2. Stream의 특징&lt;/strong&gt;&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strToIntList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4,5,6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;strToIntList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(1) 람다식을 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;표준 함수형 인터페이스가 모두 포함된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4,5,6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;strToIntList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;Collection은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.stream()&lt;/code&gt;을 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt;타입의 객체로 바꿔줄 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map()&lt;/code&gt;은 Function&amp;lt;T, R&amp;gt; 함수적 인터페이스(람다식)를 매개변수로 받아 Stream의 데이터를 하나씩 람다식으로 처리하여 다시 Stream 객체에 담는다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect()&lt;/code&gt;는 스트림의 데이터를 모아 새로운 객체를 만들어 리턴한다. 상단의 코드에선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectors.toList()&lt;/code&gt;를 사용해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; 객체를 만들어 리턴한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체 스트림(Stream&lt;T&gt;) 이 외에도 기본 타입에 특화된 기본 타입 스트림 라이브러리를 갖고 있다.&lt;/T&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;리턴타입&lt;/th&gt;
      &lt;th&gt;메서드(매개변수)&lt;/th&gt;
      &lt;th&gt;소스&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Stream&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;java.util.Collection.stream()&lt;/td&gt;
      &lt;td&gt;컬렉션&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stream&lt;br /&gt;IntStream&lt;br /&gt;LongStream&lt;br /&gt;DoubleStream&lt;/td&gt;
      &lt;td&gt;Arrays.stream(T[]), Stream.of(T[])&lt;br /&gt;Arrays.stream(int[]), IntStream.of(int[])&lt;br /&gt;Arrays.stream(long[]), LongStream.of(long[])&lt;br /&gt;Arrays.stream(double[]), DoubleStream.of(double[])&lt;/td&gt;
      &lt;td&gt;배열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IntStream&lt;/td&gt;
      &lt;td&gt;IntStream.range(long, long)&lt;br /&gt;LongStream.rangeClosed(int, int)&lt;/td&gt;
      &lt;td&gt;int 범위&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LongStream&lt;/td&gt;
      &lt;td&gt;LongStream.range(long, long)&lt;br /&gt;LongStream.rangeClosed(long, long)&lt;/td&gt;
      &lt;td&gt;long 범위&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stream&lt;Path&gt;&lt;/Path&gt;&lt;/td&gt;
      &lt;td&gt;Files.find(Path, int, BiPredicate, FileVisitOption)&lt;br /&gt;Files.list(Path)&lt;/td&gt;
      &lt;td&gt;디렉토리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Stream&lt;String&gt;&lt;/String&gt;&lt;/td&gt;
      &lt;td&gt;Files.lines(Path, Charset)&lt;br /&gt;BufferedReader.lines()&lt;/td&gt;
      &lt;td&gt;파일&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DoubleStream&lt;br /&gt;IntStream&lt;br /&gt;LongStream&lt;/td&gt;
      &lt;td&gt;Random.doubles(…)&lt;br /&gt;Random.ints()&lt;br /&gt;Random.longs()&lt;/td&gt;
      &lt;td&gt;랜덤 수&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;설명
 IntStream에 스트림의 모든 값을 더해주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum()&lt;/code&gt;이 있기 때문에, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intList&lt;/code&gt;를 IntStream으로 바꾸어 사용해야 한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntStream.of()&lt;/code&gt;로 직접 생성과 초기화하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntStream&lt;/code&gt;으로 만드는 방법도 있지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapToInt()&lt;/code&gt;로 기본 스트림을 IntStream으로 바꿔줄 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 중간/단말연산을 갖고 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4,5,6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;중간연산
    &lt;ul&gt;
      &lt;li&gt;계속 스트림을 반환하며 연산을 이어서 할 수 있게 한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 객체를 다시 가공해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 객체로 만드는 연산을 한다.&lt;/li&gt;
      &lt;li&gt;중간 연산자들은 연속해서 사용할 수 있고, 중간 연산 이후에는 다른 스트림이 반환된다.
        &lt;ul&gt;
          &lt;li&gt;원본인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strList&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt; 값들은 바뀌지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;반환값&lt;/th&gt;
      &lt;th&gt;연산 인수&lt;/th&gt;
      &lt;th&gt;함수 디스크립터&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;Stream&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;Predicator&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;T -&amp;gt; boolean&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;map&lt;/td&gt;
      &lt;td&gt;Stream&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;Function&amp;lt;T, R&amp;gt;&lt;/td&gt;
      &lt;td&gt;T -&amp;gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;limit&lt;/td&gt;
      &lt;td&gt;Stream&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sorted&lt;/td&gt;
      &lt;td&gt;Stream&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;Comparator&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt;(T, T) -&amp;gt; int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;distinct&lt;/td&gt;
      &lt;td&gt;Stream&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 문자열 스트림 생성&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 문자열 스트림을 정수형 스트림으로 반환 =&amp;gt; {3, 1, 4, 2, 5, 5}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 정렬 =&amp;gt; {1, 2, 3, 4, 5, 5}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 중복제거 =&amp;gt; {1, 2, 3, 4, 5}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 개수를 3개로 제한 =&amp;gt; {1, 2, 3}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// List로 변환&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;map
      &lt;ul&gt;
        &lt;li&gt;각각의 엘리먼트를 변경하여 새로운 컨텐츠를 생성하는 기능&lt;/li&gt;
        &lt;li&gt;입력 컬렉션을 출력 컬렉션으로 매핑하거나 변경&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// java8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;filter
      &lt;ul&gt;
        &lt;li&gt;엘리먼트 선택&lt;/li&gt;
        &lt;li&gt;컬렉션을 조건에 의해 선택&lt;/li&gt;
        &lt;li&gt;boolean 결과를 리턴하는 람다표현식이 필요하다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java7&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;():&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWitch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;reduce()
      &lt;ul&gt;
        &lt;li&gt;엘리먼트를 비교하고 컬렉션에서 하나의 값으로 연산한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java7&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;honne&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//java8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hoone&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;name1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nam2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;map과 flatMap&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;map은 스트림의 스트림을 반환하는 반면, flatMap은 스트림을 반환한다.
      &lt;ul&gt;
        &lt;li&gt;스트림의 형태가 배열이거나 또는 입력된 값을 또 다시 스트림의 형태로 반환하고자 할 때는 flatMap이 유용하다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(1) Map&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;단일 스트림 안의 요소를 원하는 특정 형태로 변환할 수 있다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(2) FlatMap&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;스트림의 형태가 배열과 같을 때, 모든 원소를 단일 원소 스트림으로 반환할 수 있다.&lt;/li&gt;
    &lt;li&gt;여러 개의 스트림을 한 개의 스트림으로 합쳐준다.&lt;/li&gt;
    &lt;li&gt;복잡한 스트림을 간단한 스트림으로 변경하는 데 사용할 수 있다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;의 결과로 단일 원소 스트림을 반환하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; 메서드를 바로 체이닝하여 사용할 수 있다.&lt;/li&gt;
    &lt;li&gt;초기에 생성된 스트림이 배열인 경우에 매우 유용하다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arraysWithFlatMap&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;(3) Map과 flatMap의 비교 예시(1)&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arraysWithFlatMap&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arraysWithMap&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HashSet:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Set:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Set:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;(4) Map과 flatMap의 비교 예시(2)&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kim&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;taeng&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mad&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;play&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMatp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;strem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;taeng&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;taeng&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                              &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;은 결과를 가지고 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; 메서드를 체이닝하여 모든 요소를 출력할 수 있다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;은 단일 요소로 리턴되기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;의 결과를 가지고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; 메서드로 loop를 진행한 후, 그 내부에서 다시 한 번 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; 메서드를 체이닝하여 사용해야 한다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(5) Map과 flatMap의 비교 예시(3)&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kim&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;taeng&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mad&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;play&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;reduce() 메서드와 동일하게 값을 하나로 모으는 형태&lt;/li&gt;
    &lt;li&gt;여러 편의 메서드를 제공한다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// java8&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplier&lt;/code&gt;: 새로운 결과 컨테이너를 생성&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accumulator&lt;/code&gt;: 결과에 추가 요소를 통합하기 위한 역할&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;combiner&lt;/code&gt;: 계산 결과를 결합하는 역할&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collector&lt;/code&gt;를 직접 정의하는 경우&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collector.of&lt;/code&gt; 메서드를 이용
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;combiner&lt;/code&gt;의 형태는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BinaryOperator&lt;/code&gt;이다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arraysWithMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HashSet:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Set:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;단말연산
    &lt;ul&gt;
      &lt;li&gt;스트림을 종료시키고 결과를 반환한다.&lt;/li&gt;
      &lt;li&gt;스트림을 받아 결과값을 만들고 더 이상 스트림을 반환하지 않는다(스트림을 닫는다).
        &lt;ul&gt;
          &lt;li&gt;만약 연산을 계속 이어 하고 싶다면, 스트림을 다시 만들어 작업을 이어가야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;forEach&lt;/td&gt;
      &lt;td&gt;스트림에 각 요소를 람다를 통해 특정 작업을 실행한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;count&lt;/td&gt;
      &lt;td&gt;스트림의 요소 개수를 반환한다(long).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;collect&lt;/td&gt;
      &lt;td&gt;스트림을 컬렉션 형태로 반환한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;연산의 순서
    &lt;ul&gt;
      &lt;li&gt;스트림은 지연된(lazy) 연산을 수행한다.&lt;/li&gt;
      &lt;li&gt;단말 연산이 없으면 연산을 실행하지 않고, 단말 연산이 수행되기 전에는 중간연산은 실행되지 않는다.
        &lt;ul&gt;
          &lt;li&gt;결과가 필요하기 전까지 실행되지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(단말 연산이 없기 때문에 아래 코드는 아무 것도 출력되지 않는다.)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forEach: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(아래와 같은 결과로 출력된다.)&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;63-병렬처리&quot;&gt;&lt;strong&gt;6.3. 병렬처리&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;스트림은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel()&lt;/code&gt;을 활용해 연산을 병렬로 처리할 수 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스트림 안에 데이터가 매우 많은 경우, 병렬 스트림과 연산의 순서를 활용하여 더 빠르게 연산할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;코드 1
    &lt;ul&gt;
      &lt;li&gt;결과값은 각 인자가 순서대로 연산들을 통과한다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forEach: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;결과&lt;/p&gt;
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;코드 2
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel()&lt;/code&gt;로 스트림을 병렬스트림으로 바꾼 뒤 연산을 수행하면, 순서없이 병렬로 처리된다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forEach: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;결과&lt;/p&gt;
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출처&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sehun-kim.github.io/sehun/java-lambda-stream/&quot;&gt;https://sehun-kim.github.io/sehun/java-lambda-stream/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://khj93.tistory.com/entry/JAVA-람다식Rambda란-무엇이고-사용법&quot;&gt;https://khj93.tistory.com/entry/JAVA-람다식Rambda란-무엇이고-사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nekisse.tistory.com/15&quot;&gt;https://nekisse.tistory.com/15&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tcpschool.com/java/java_lambda_reference&quot;&gt;http://tcpschool.com/java/java_lambda_reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://inma.tistory.com/151&quot;&gt;https://inma.tistory.com/151&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sehoonoverflow.tistory.com/26&quot;&gt;https://sehoonoverflow.tistory.com/26&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://madplay.github.io/post/difference-between-map-and-flatmap-methods-in-java&quot;&gt;https://madplay.github.io/post/difference-between-map-and-flatmap-methods-in-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">Lambda 1.1. Lambda란 1.2. Lambda의 장단점 1.3. Lambda의 기본식</summary></entry><entry><title type="html">Part 1-5. 데이터베이스</title><link href="/CS-Database" rel="alternate" type="text/html" title="Part 1-5. 데이터베이스" /><published>2021-05-12T00:00:00+00:00</published><updated>2021-05-12T00:00:00+00:00</updated><id>/CS-Database</id><content type="html" xml:base="/CS-Database">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;데이터베이스&lt;/strong&gt; &lt;br /&gt;
1.1. 데이터베이스를 사용하는 이유 &lt;br /&gt;
1.2. 데이터베이스의 특징 &lt;br /&gt;
1.3. 데이터베이스의 성능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Index&lt;/strong&gt; &lt;br /&gt;
2.1. Index란 무엇인가 &lt;br /&gt;
2.2. Index의 자료구조 &lt;br /&gt;
2.3. Index의 종류 &lt;br /&gt;
2.4. Clustered index &lt;br /&gt;
2.5. Index의 성능과 고려해야 할 사항&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;정규화&lt;/strong&gt; &lt;br /&gt;
3.1. 정규화의 탄생 배경&lt;br /&gt;
3.2. 정규화란 무엇인가 &lt;br /&gt;
3.3. 정규화의 종류 &lt;br /&gt;
3.4. 정규화의 장단점 &lt;br /&gt;
3.5. 반정규화(De-normalization)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Transaction&lt;/strong&gt; &lt;br /&gt;
4.1. 트랜잭션(Transaction)이란 무엇인가&lt;br /&gt;
4.2. 트랜잭션과 Lock   &lt;br /&gt;
4.3. 트랜잭션의 특성&lt;br /&gt;
4.4. 트랜잭션의 상태 &lt;br /&gt;
4.5. 트랜잭션을 사용할 때 주의할 점&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;교착상태&lt;/strong&gt; &lt;br /&gt;
5.1. 교착상태란 무엇인가 &lt;br /&gt;
5.2. 교착상태의 예시(Mysql) &lt;br /&gt;
5.3. 교착상태의 빈도를 낮추는 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Statement vs. PreparedStatement&lt;/strong&gt; &lt;br /&gt;
6.1. java.sql.Statement &lt;br /&gt;
6.2. java.sql.PreparedStatement&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;NoSQL&lt;/strong&gt; &lt;br /&gt;
7.1. NoSQL의 정의 &lt;br /&gt;
7.2. CAP 이론 &lt;br /&gt;
7.2. 저장 방식에 따른 분류&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-데이터베이스&quot;&gt;&lt;strong&gt;1. 데이터베이스&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;11-데이터베이스를-사용하는-이유&quot;&gt;&lt;strong&gt;1.1. 데이터베이스를 사용하는 이유&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스가 존재하기 이전
    &lt;ul&gt;
      &lt;li&gt;파일 시스템을 이용하여 데이터를 관리&lt;/li&gt;
      &lt;li&gt;데이터를 각각의 파일 단위로 저장하며, 이러한 일들을 처리하기 위한 독립적인 애플리케이션과 상호 연동되어야 한다.
        &lt;ul&gt;
          &lt;li&gt;데이터의 종속성 문제와 중복성, 데이터의 무결성 문제 발생&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;12-데이터베이스의-특징&quot;&gt;&lt;strong&gt;1.2. 데이터베이스의 특징&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 데이터의 독립성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;물리적 독립성: 데이터베이스 사이즈를 늘리거나 성능 향상을 위해 데이터 파일을 늘리거나 추가하더라도 관련된 응용 프로그램을 수정할 필요가 없다.&lt;/li&gt;
  &lt;li&gt;논리적 독립성: 데이터베이스는 논리적인 구조로 다양한 응용 프로그램의 논리적 요구를 만족시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 데이터의 무결성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 경로를 통해 잘못된 데이터가 발생하는 경우의 수를 방지&lt;/li&gt;
  &lt;li&gt;데이터 유효성 검사를 통해 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 데이터의 보안성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인가된 사용자들만 데이터베이스나 데이터베이스 내의 자원에 접근할 수 있도록 계정 관리 또는 접근 권한을 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) 데이터의 일관성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;연관된 정보를 논리적인 구조로 관리함으로써, 어떠 하나의 데이터만 변경했을 경우 발생할 수 있는 데이터의 불일치성을 배제할 수 있다.&lt;/li&gt;
  &lt;li&gt;작업 중 일부 데이터만 변경되기 때문에 나머지 데이터와 일치하지 않는 경우의 수를 배제할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) 데이터 중복의 최소화&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 통합하여 관리함으로써, 파일 시스템의 단점 중에 하나인 자료의 중복과 데이터의 중복성 문제를 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;13-데이터베이스의-성능&quot;&gt;&lt;strong&gt;1.3. 데이터베이스의 성능&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;디스크 I/O를 어떻게 줄이느냐에서 시작
    &lt;ul&gt;
      &lt;li&gt;디스크 I/O: 디스크 드라이브의 플래터(원판)을 돌려서 읽어야 할 데이터를 저장된 위치로 디스크 헤더를 이동시킨 다음 데이터를 읽는 것&lt;/li&gt;
      &lt;li&gt;데이터를 읽는 데 걸리는 시간: 디스크 헤더를 움직여서 읽고 쓸 위치로 옮기는 단계에서 결정된다.
        &lt;ul&gt;
          &lt;li&gt;디스크의 성능은 디스크 헤더의 위치 이동없이 얼마나 많은 데이터를 한 번에 기록하느냐에 따라 결정된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;순차 I/O가 랜덤 I/O보다 빠를 수 밖에 없다.
        &lt;ul&gt;
          &lt;li&gt;쿼리 튜닝: 현실에서는 대부분의 I/O이 랜덤 I/O이기 때문에, 랜덤 I/O를 순차 I/O로 바꿔서 실행할 수 없을까라는 생각에서 시작하여, 랜덤 I/O 자체를 줄여주는 것&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-index&quot;&gt;&lt;strong&gt;2. Index&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;21-index란-무엇인가&quot;&gt;&lt;strong&gt;2.1. Index란 무엇인가&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 정의&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;책의 맨 처음 또는 맨 마지막에 있는 색인
    &lt;ul&gt;
      &lt;li&gt;데이터: 책의 내용&lt;/li&gt;
      &lt;li&gt;데이터가 저장된 레코드의 주소: 인덱스 목록에 있는 페이지의 번호&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컬럼의 값과 해당 레코드아 저장된 주소를 키와 값의 쌍으로 만들어두는 것
    &lt;ul&gt;
      &lt;li&gt;DBMS도 데이터베이스 테이블의 모든 데이터를 검색해서 원하는 결과를 가져 오려면 시간이 오래 걸리기 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 특징&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;항상 정렬된 상태를 유지하기 때문에 원하는 값을 탐색하는 데에는 빠르지만, 새로운 값을 추가/삭제/수정하는 경우에는 쿼리문 실행 속도가 느려진다.
    &lt;ul&gt;
      &lt;li&gt;인덱스는 데이터의 저장 성능을 희생하고 그 대신 데이터의 읽기 속도를 높이는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 쿼리문의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; 조건절에 사용되는 컬럼이라고 전부 인덱스로 생성하면, 데이터의 저장능력이 떨어지고 인덱스의 크기가 비대해져 오히려 역효과 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;22-index의-자료구조&quot;&gt;&lt;strong&gt;2.2. Index의 자료구조&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) B+-Tree 인덱스 알고리즘&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;일반적으로 사용되는 인덱스 알고리즘&lt;/li&gt;
  &lt;li&gt;컬럼의 값을 변형하지 않고(실제로는 값의 앞 부분만 잘라서 관리한다 원래의 값을 이용해 인덱싱하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Hash 인덱스 알고리즘&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;컬럼의 값으로 해시 값을 계산해서 인덱싱하는 알고리즘&lt;/li&gt;
  &lt;li&gt;값을 변형해서 인덱싱 하므로, 특정 문자로 시작하는 값으로 검색하는 전방 일치과 같이 값의 일부만으로 검색하고자 할 때는 해시 인덱스를 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;주로 메모리 기반의 데이터베이스에서 많이 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) index 생성 시 B+-Tree 인덱스 알고리즘을 사용하는 이유&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 쿼리문의 조건에는 부등호(&amp;lt;&amp;gt;) 연산도 포함이 된다. Hash 인덱스 알고리즘의 경우, hash table을 사용하게 된다면, 등호(=) 연산이 아닌 부등호 연산의 경우에 문제가 발생한다.
    &lt;ul&gt;
      &lt;li&gt;동등 연산(=)에 특화된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashtable&lt;/code&gt;은 데이터베이스의 자료구조로 적합하지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;23-index의-종류&quot;&gt;&lt;strong&gt;2.3. Index의 종류&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;simple level index&lt;/li&gt;
  &lt;li&gt;composite index&lt;/li&gt;
  &lt;li&gt;multi level index&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) Simple level Index &lt;br /&gt;
&lt;img src=&quot;https://joosjuliet.github.io/images/2019-01-07-index/sparse_index.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정렬되어 있기 때문에 이진 탐색에 좋다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where key = 1003 인덱스가 걸린 컬럼의 where문 = (equality)(equality search)&lt;/code&gt;이 빠르다.&lt;/li&gt;
  &lt;li&gt;메모리에 index table의 데이터 크기가 본 table의 것보다 작기 때문에 테이블을 탐색할 수 있는 양도 더 늘어나게 된다. 따라서 더 많은 양을 한 번에 탐색할 수 있기 때문에 탐색 시간이 단축된다.&lt;/li&gt;
  &lt;li&gt;Primary Index(기본 인덱스): 인덱스를 primary key에 생성&lt;/li&gt;
  &lt;li&gt;Secondary Index(보조 인덱스): 다른 컬럼에 인덱스를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Composite Index &lt;br /&gt;
&lt;img src=&quot;https://joosjuliet.github.io/images/2019-01-07-index/composite_index.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 column에 indexing&lt;/li&gt;
  &lt;li&gt;single index가 한 column에 indexing을 하는 것과 다르게 여러 개의 column에 indexing을 한다.&lt;/li&gt;
  &lt;li&gt;빈도 수가 적은 인덱스를 먼저 거는 게 좋다.&lt;/li&gt;
  &lt;li&gt;인덱스로 생성하는 필드의 속성이 중요하다.
    &lt;ul&gt;
      &lt;li&gt;title, author 이 순서로 인덱스를 설정한다면,
        &lt;ul&gt;
          &lt;li&gt;title을 search 하는 경우, index를 생성한 효과를 볼 수 있지만&lt;/li&gt;
          &lt;li&gt;author만으로 search 하는 경우, index를 생성한 것이 소용이 없어진다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 질의를 어떻게 할 것인가가 인덱스를 어떻게 생성할 것인가에 많은 영향을 미친다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Multi Level Index &lt;br /&gt;
&lt;img src=&quot;https://joosjuliet.github.io/images/2019-01-07-index/multilevel_index.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인덱스 레벨이 많은 경우&lt;/li&gt;
  &lt;li&gt;인덱스를 위한 인덱스를 위한 … 인덱스&lt;/li&gt;
  &lt;li&gt;데이터가 커지면 index 크기 역시 커진다.
    &lt;ul&gt;
      &lt;li&gt;그러므로 single level index를 사용할 수 없어 multi level index를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;inner index(원래 인덱스)를 작은 색인으로 분할하여 outer index를 작게 만든다.
    &lt;ul&gt;
      &lt;li&gt;이로 인해 I/O가 자주 일어나는 문제가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 데이터베이스 파일과 함께 디스크에 저장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;24-clustered-index&quot;&gt;&lt;strong&gt;2.4. Clustered index&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;클러스터(Cluster): 여러 개를 하나로 묶는다는 의미로 주로 사용된다.&lt;/li&gt;
  &lt;li&gt;인덱스에서 클러스터드는 비슷한 것들을 묶어서 저장하는 형태로 구현된다.
    &lt;ul&gt;
      &lt;li&gt;주로 비슷한 값들을 동시에 조회하는 경우가 많다는 점에서 착안&lt;/li&gt;
      &lt;li&gt;비슷한 값들은 물리적으로 인접한 장소에 저장되어 있는 데이터들을 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블의 프라이머리 키에 대해서만 적용되는 내용
    &lt;ul&gt;
      &lt;li&gt;즉, 프라이머리 키 값이 비슷한 레코드끼리 묶어서 저장하는 것&lt;/li&gt;
      &lt;li&gt;클러스터드 인덱스에서는 프라이머리 키 값에 의해 레코드의 저장 위치가 결정되며, 프라이머리 키 값이 변경되면 그 레코드의 물리적인 저장 위치까지 변경되어야 한다.
        &lt;ul&gt;
          &lt;li&gt;그렇기 때문에 프라이머리 키를 신중하게 결정하고 클러스터드 인덱스를 사용해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블 당 한 개만 생성할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;프라이머리 키에 대해서만 적용되기 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;행 데이터를 인덱스로 지정한 열에 맞춰 자동 정렬한다.&lt;/li&gt;
  &lt;li&gt;테이블 생성 시 하나의 열에 Primary key를 쩡하면, 자동으로 클러스터형 인덱스가 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;25-index의-성능과-고려해야-할-사항&quot;&gt;&lt;strong&gt;2.5. Index의 성능과 고려해야 할 사항&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 쿼리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INDEX&lt;/code&gt;가 항상 좋은 것은 아니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INDEX&lt;/code&gt;를 생성하게 되면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt; 쿼리문을 실행할 때 별도의 과정이 추가적으로 발생한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INDEX&lt;/code&gt;에 대한 데이터도 추가해야 하므로 그만큼 성능에 손실이 따른다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INDEX&lt;/code&gt;에 존재하는 값은 삭제하지 않고 사용하지 않는다는 표시로 남게 된다.
        &lt;ul&gt;
          &lt;li&gt;즉, row의 수는 그대로이다.&lt;/li&gt;
          &lt;li&gt;실제 데이터는 10만건인데, 데이터는 100만건이 있는 결과를 낳을 수도 있는 것이다. 이렇게 되면 인덱스는 더 이상 제 역할을 못하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;의 문제점을 수반하게 되어, 변경 전 데이터 삭제되지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;로 인한 split도 발생하게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컬럼을 이루고 있는 데이터의 형식에 따라 성능에 악영향을 미칠 수 있다.
데이터의 형식에 따라 인덱스를 만들면 효율적인 것이 있고, 그렇지 않은 것이 있다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이름&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;나이&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;성별&lt;/code&gt; 세 가지의 필드를 갖고 있는 테이블이 있다.&lt;/li&gt;
      &lt;li&gt;이름: 온갖 경우의 수가 존재&lt;/li&gt;
      &lt;li&gt;나이: INT 타입&lt;/li&gt;
      &lt;li&gt;성별: 남/녀&lt;/li&gt;
      &lt;li&gt;이름에 대해서만 인덱스를 생성하면 효율적이다.
        &lt;ul&gt;
          &lt;li&gt;성별이나 나이에 대해 인덱스를 생성하면, 10000 레코드에 해당하는 테이블에 대해서 2000 단위로 성별을 인덱스를 생성했다고 가정했을 때 값의 range가 적은 성별은 인덱스를 읽고 다시 한 번 디스크 I/O가 발생하기 때문이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-정규화&quot;&gt;&lt;strong&gt;3. 정규화&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;31-정규화의-탄생-배경&quot;&gt;&lt;strong&gt;3.1. 정규화의 탄생 배경&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;한 리레이션에 여러 Entity의 attribute를 혼합하게 되면 정보가 중복하여 저장되며, 저장 공간을 낭비하게 된다.
    &lt;ul&gt;
      &lt;li&gt;중복된 정보는 갱신 이상을 일으킨다.
        &lt;ul&gt;
          &lt;li&gt;동일한 정보를 한 릴레이션에는 변경하고, 나머지 릴레이션에서는 변경하지 않은 경우 어느 것이 정확한 지 알 수 없게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;이상 현상(Anomaly)의 종류&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;갱신 이상(Modification Anomaly)
      &lt;ul&gt;
        &lt;li&gt;반복된 데이터 중에 일부를 갱신할 시, 데이터의 불일치가 발생하는 현상&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;삽입 이상(Insertion Anomaly)
      &lt;ul&gt;
        &lt;li&gt;불필요한 정보를 함께 저장하지 않고서는 어떤 정보를 저장하는 것이 불가능한 경우&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;삭제 이상(Deletion Anomaly)
      &lt;ul&gt;
        &lt;li&gt;필요한 정보를 삭제하지 않고서는 어떤 정보를 삭제하는 것이 불가능한 경우&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;32-정규화란-무엇인가&quot;&gt;&lt;strong&gt;3.2. 정규화란 무엇인가&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;관계형 데이터베이스에서 중복을 최소화하기 위해 데이터를 구조화하는 작업&lt;/li&gt;
  &lt;li&gt;불만족스러운 나쁜 릴레이션의 attribute를 나누어서 좋은 작은 릴레이션으로 분해하는 작업&lt;/li&gt;
  &lt;li&gt;정규화 과정을 거치면 정규형을 만족하게 된다.
    &lt;ul&gt;
      &lt;li&gt;정규형: 특정 조건을 만족하는 릴레이션의 스키마 형태(제 1 정규형, 제 2 정규형 등이 존재)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) 나쁜 릴레이션을 파악하는 방법&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;entity를 구성하고 있는 attribute 간에 함수적 종속성(Functional Dependency)을 판단
    &lt;ul&gt;
      &lt;li&gt;판단된 함수적 종속성은 좋은 릴레이션 설계의 정형적 기준으로 사용된다.&lt;/li&gt;
      &lt;li&gt;각각의 정규형마다 어떠한 함수적 종속성을 만족하는 지에 따라 정규형이 정의되고, 그 정규형을 만족하지 못하는 정규형을 나쁜 릴레이션으로 파악한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 함수적 종속성(Functional Dependency)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;attribute 데이터들의 의미와 attribute 간의 상호 관계로부터 유도되는 제약조건의 일종&lt;/li&gt;
  &lt;li&gt;정의: X와 Y를 임의의 attribute 집합이라고 할 때, X의 값이 Y의 값을 유일(unique)하게 결정한다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X는 Y를 함수적으로 결정한다&lt;/code&gt;라고 한다.&lt;/li&gt;
  &lt;li&gt;실세계에서 존재하는 attribute 사이의 제약조건으로부터 유도된다.&lt;/li&gt;
  &lt;li&gt;각족 추론 규칙에 따라 attribute 간의 함수적 종속성을 판단할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 정규형이 만족해야하는 조건&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;분해의 대상인 분해 집합 D는 무손실 조인을 보장해야 한다.&lt;/li&gt;
  &lt;li&gt;분해 집합 D는 함수적 종속성을 보존해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;무손실 분해(Lossy decomposition)&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;하나의 릴레이션을 분해하고 다시 조인연산을 했을 때 데이터 손실이 없는 것&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;33-정규화의-종류&quot;&gt;&lt;strong&gt;3.3. 정규화의 종류&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 제 1 정규형(1NF)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;attribute의 도메인이 오직 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;원자값&lt;/code&gt;만을 포함하고, tuple의 모든 attribute가 도메인에 속하는 하나의 값을 가져야 한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;원자값&lt;/code&gt;: 각 로우마다 컬럼의 값이 1개씩만 있는 것&lt;/li&gt;
      &lt;li&gt;복합 attribute, 다중값 attribute, 중첩 릴레이션 등 비 원자적인 attribute를 허용하지 않는 릴레이션 형태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관계형 데이터베이스의 테이블이 1NF이면, 최소한 테이블은 관계이며 중복되는 항목이 없어야 한다.&lt;/li&gt;
  &lt;li&gt;표준
    &lt;ul&gt;
      &lt;li&gt;각 테이블에서 중복을 제거한다.&lt;/li&gt;
      &lt;li&gt;각각 관계된 데이터 모임을 위하여 분리된 테이블을 만든다.&lt;/li&gt;
      &lt;li&gt;각각 관계된 데이터 모임을 기본키로 식별한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 제 2 정규형(2NF)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 비주요 attribute가 주요 attribute에 대해서 완전 함수적 종속인 경우.&lt;/li&gt;
  &lt;li&gt;후보 키 K와 K에 속하지 않는 속성 A가 있을 때, A를 결정하기 위해 K의 일부가 아닌 K 전체를 참조해야만 하는 경우, 1NF 테이블은 2NF 이다.
    &lt;ul&gt;
      &lt;li&gt;1NF 테이블은 복합 후보 키(한 개 이상의 속성들로 구성된 후보 키)가 없으면 자동으로 2NF이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블이 제 2 정규형을 만족하고, 테이블 내의 모든 속성이 기본 키에만 의존하며 다른 후보 키에 의존하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;완전 함수적 종속&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;X -&amp;gt; Y 라고 가정했을 때, X의 어떠한 애트리뷰트라도 제거하면 더 이상 함수적 종속이 성립하지 않는 경우&lt;/li&gt;
    &lt;li&gt;키가 아닌 열들이 각각 후보키에 대해 결정되는 릴레이션&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(3) 제 3 정규형(3NF)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;어떠한 비주요 애트리뷰트도 기본키에 대해서 이행적으로 종속되지 않는 경우&lt;/li&gt;
  &lt;li&gt;기본 키 이외의 다른 컬럼이 그 외 다른 컬럼을 결정할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;이행 함수적 종속&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;X -&amp;gt; Y, Y -&amp;gt; Z인 경우에 의해서 추론될 수 있는 X-&amp;gt; Z의 종속관계&lt;/li&gt;
    &lt;li&gt;비주요 애트리뷰트가 비주요 애트리뷰트에 의해 종속되는 경우가 없는 릴레이션&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(4) BCNF(Boyce-Codd) 정규형&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 후보 키가 존재하는 릴레이션에 해당하는 정규화&lt;/li&gt;
  &lt;li&gt;모든 결정자가 후보키 집합게 속한 정규형&lt;/li&gt;
  &lt;li&gt;복잡한 식별자 관계에 의해 발생하는 문제를 해결하기 위해 제 3 정규형을 보완하는 데 의미가 있다.&lt;/li&gt;
  &lt;li&gt;비주요 애트리뷰트가 후보 키의 일부를 결정하는 분해하는 과정을 말한다.
    &lt;ul&gt;
      &lt;li&gt;일반 컬럼이 후보키를 결정하지 않는 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;조건
    &lt;ul&gt;
      &lt;li&gt;모든 제 2 정규형 릴레이션은 제 1 정규형을 갖는다.&lt;/li&gt;
      &lt;li&gt;모든 제 3 정규형 릴레이션은 제 2 정규형을 갖는다.&lt;/li&gt;
      &lt;li&gt;모든 BCNF 정규형 릴레이션은 제 3 정규형을 갖는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;34-정규화의-장단점&quot;&gt;&lt;strong&gt;3.4. 정규화의 장단점&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 정규화의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 변경 시 이상 현상(Anomaly)을 제거할 수 있다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 구조 확장 시 재 디자인을 최소화 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;정규화된 데이터베이스 구조에서는 새로운 데이터 형의 추가로 인한 확장 시, 그 구조를 변경하지 않아도 되거나 일부만 변경해도 된다.
        &lt;ul&gt;
          &lt;li&gt;데이터베이스와 연동된 응용 프로그램에 최소한의 영향만을 미치게 되며, 응용프로그램의 생명을 연장시킨다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자에게 데이터 모델을 더욱 의미있게 제공한다.
    &lt;ul&gt;
      &lt;li&gt;정규화된 테이블들 간의 관계들을 현실 세계에서의 개념들과 그 관계들을 반영한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 정규화의 단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;릴레이션 분해로 인한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; 연산이 많아진다.
    &lt;ul&gt;
      &lt;li&gt;이로 인해, 질의에 대한 응답 시간이 느려질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;35-반정규화de-normalization&quot;&gt;&lt;strong&gt;3.5. 반정규화(De-normalization)&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;조회를 하는 SQL 문장에서 조인이 많이 발생하여 이로 인한 성능저하가 나타나는 경우에 반정규화를 적용하는 전략이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) 반정규화(De-normalization, 비정규화)란&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정규화된 엔티티, 속성, 관계를 시스템의 성능 향상 및 개발과 운영의 단순화를 위해 중복 통합, 분리 등을 수행하는 데이터 모델링 기법 중 하나이다.&lt;/li&gt;
  &lt;li&gt;반정규화가 필요한 경우
    &lt;ul&gt;
      &lt;li&gt;디스크 I/O 량이 많아서 조회 시 성능이 저하된다.&lt;/li&gt;
      &lt;li&gt;테이블끼리의 경로가 너무 멀어 조인으로 인한 성능저하가 예상된다.&lt;/li&gt;
      &lt;li&gt;컬럼을 계산하여 조회할 때 성능이 저하될 것이 예상된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;조회에 대한 처리 성능이 중요하다고 판단될 때 부분적으로 반정규화를 고려하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 반정규화의 대상&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자주 사용되는 테이블에 액세스하는 프로세스의 수가 가장 많고 항상 일정한 범위만을 조회하는 경우&lt;/li&gt;
  &lt;li&gt;테이블에 대량 데이터가 있고 대량의 범위를 자주 처리하여 성능상 이슈가 있는 경우&lt;/li&gt;
  &lt;li&gt;테이블에 지나치게 조인을 많이 사용하게 되어 데이터를 조회하는 것이 기술적으로 어려운 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 반정규화 시 주의할 점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;과도하게 적용하면 데이터의 무결성이 깨질 수 있다.&lt;/li&gt;
  &lt;li&gt;입력, 수정 삭제의 질문에 대한 응답 시간이 늦어질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-transaction&quot;&gt;&lt;strong&gt;4. Transaction&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;41-트랜잭션transaction이란-무엇인가&quot;&gt;&lt;strong&gt;4.1. 트랜잭션(Transaction)이란 무엇인가&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;작업의 완전성을 보장해주는 것
    &lt;ul&gt;
      &lt;li&gt;논리적인 작업 셋을 모두 완벽하게 처리하거나 또는 처리하지 못할 경우에는 원 상태로 복구하여 작업의 일부만 적용되는 현상이 발생하지 않도록 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자의 입장에서는 논리적 단위로, 시스템의 입장에서는 데이터들을 접근 또는 변경하는 프로그램의 단위&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;42-트랜잭션과-lock&quot;&gt;&lt;strong&gt;4.2. 트랜잭션과 Lock&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 트랜잭션&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터의 정합성을 보장하기 위한 기능&lt;/li&gt;
  &lt;li&gt;반드시 여러 개의 변경 작업을 수행하는 쿼리가 조합되었을 때만 의미있는 개념은 아님
    &lt;ul&gt;
      &lt;li&gt;하나의 논리적인 작업 셋 중 쿼리의 개수와는 상관없이 논리적인 작업 셋 자체가 100% 적용되거나 아무 것도 적용되지 않아야 함을 보장하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Lock&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;동시성을 제어하기 위한 기능&lt;/li&gt;
  &lt;li&gt;여러 커넥션에서 동시에 동일한 자원을 요청할 경우, 순서대로 한 시점에는 하나의 커넥션만 변경할 수 있게 하는 역할
    &lt;ul&gt;
      &lt;li&gt;자원: 레코드나 테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;43-트랜잭션의-특성-acid&quot;&gt;&lt;strong&gt;4.3. 트랜잭션의 특성: ACID&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) Atomicity: 원자성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션 중간에 어떠한 문제가 발생한다면, 트랜잭션에 해당하는 어떠한 작업 내용도 수행되어서는 안된다.
    &lt;ul&gt;
      &lt;li&gt;아무런 문제가 발생하지 않았을 경우에만 수행되어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Consistency: 일관성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 완료된 다음의 상태에서도 일어나기 전의 상황과 동일하게 데이터의 일관성을 보장해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Isolation: 고립성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;각각의 트랜잭션은 서로 간섭없이 독립적으로 수행되어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) Durability: 지속성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 정상적으로 종료된 다음에는 영구적으로 데이터베이스에 작업의 결과가 저장되어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;44-트랜잭션의-상태&quot;&gt;&lt;strong&gt;4.4. 트랜잭션의 상태&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner/blob/master/Database/images/transaction-status.png?raw=true&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) Active: 트랜잭션 활동 상태&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 실행 중이며, 동작 중인 상태&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Failed: 트랜잭션 실패 상태&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션을 더 이상 정상적으로 진행할 수 없는 상태&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Partially Committed: 트랜잭션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt; 명령이 도착한 상태&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt; 이전의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql&lt;/code&gt;문이 수행되고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt;만 남은 상태&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) Commited: 트랜잭션 완료 상태&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 정상적으로 완료된 상태&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) Aborted: 트랜잭션 취소 상태&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 취소되고 트랜잭션 실행 이전의 데이터로 돌아간 상태&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;strong&gt;※ Partially Commited와 Commited의 차이점&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partially Committed&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt; 요청이 들어왔을 때&lt;/li&gt;
        &lt;li&gt;이 후, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt;을 문제없이 수행할 수 있으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commited&lt;/code&gt; 상태, 만약 오류가 발생하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Failed&lt;/code&gt; 상태가 된다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commited&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt;을 정상적으로 완료한 상태&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;45-트랜잭션을-사용할-때-주의할-점&quot;&gt;&lt;strong&gt;4.5. 트랜잭션을 사용할 때 주의할 점&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션의 범위를 최소화하여 적용한다.
    &lt;ul&gt;
      &lt;li&gt;반드시 필요한 최소의 코드에만 적용하는 것이 좋다.
        &lt;ul&gt;
          &lt;li&gt;일반적으로 데이터베이스 커넥션 개수는 제한적인데, 각 단위 프로그램이 커넥션을 소유하는 시간이 길어진다면 그 사용 가능한 여유 개수는 줄어들게 된다.&lt;/li&gt;
          &lt;li&gt;어느 순간 각 단위 프로그램에서 커넥션을 가져가기 위해 기다려야 하는 상황이 발생할 수 도 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-교착상태&quot;&gt;&lt;strong&gt;5. 교착상태&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;51-교착상태란-무엇인가&quot;&gt;&lt;strong&gt;5.1. 교착상태란 무엇인가&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;교착상태
    &lt;ul&gt;
      &lt;li&gt;두 개 이상의 트랜잭션이 특정 자원(테이블 또는 행)의 잠금(Lock)을 획득한 상태에서 다른 트랜잭션이 소유하고 있는 잠금을 요구했을 때, 이를 아무리 기다려도 상황이 바뀌지 않는 상태&lt;/li&gt;
      &lt;li&gt;복수의 트랜잭션 사용 시 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;52-교착상태의-예시mysql&quot;&gt;&lt;strong&gt;5.2. 교착상태의 예시(Mysql)&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL의 MVCC에 따른 특성 때문에 트랜잭션에서 갱신 연산(Insert, Update, Delete)를 실행하면 잠금을 획득하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;MVCC(Multi-Version Concurrency Control, 다중 버전 동시성 제어)&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;DBMS가 일반적으로 사용하는 동시성 제어 방식&lt;/li&gt;
    &lt;li&gt;데이터베이스로의 동시 접근을 제공하고 프로그래밍 언어에서 transactional memory를 구현한다.&lt;/li&gt;
    &lt;li&gt;동시성 제어가 없다면, 누군가가 데이터베이스를 읽는 동시에 다른 누군가가 기록을 하려고 하면 반쯤 기록되거나 일관성이 없는 데이터를 보게 될 가능성이 있다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;1. 동시성 제어(Concurrency Control)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;(1) 동시성 제어란?&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;DBMS가 다수의 사용자 사이에서 동시에 작용하는 다중 트랜잭션의 상호간섭 작용에서 Database를 보호하는 것&lt;/li&gt;
    &lt;li&gt;동시성을 허용하면 일관성이 낮아지게 된다. &lt;br /&gt;
&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FYYwAw%2FbtqAhqpozl2%2FIMdpfbgguBj897K4VkEwy1%2Fimg.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;다수 사용자의 동시 접속을 위해 DBMS는 동시성을 제어할 수 있도록 Lock 기능과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SET TRANSACTION ON&lt;/code&gt; 명령어를 이용해 트랜잭션의 격리수준(isolation)을 조정할 수 있는 기능 제공&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(2) 동시성 제어의 목표&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;동시에 실행되는 트랜잭션 수를 최대화하면서 입력, 수정, 삭제, 검색 시 데이터의 무결성을 유지하는 데 있다.
      &lt;ul&gt;
        &lt;li&gt;Locking 메커니즘: 읽기 작업에 공유 Lock을 사용&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(3) 동시성 제어 방법&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;비관적 동시성 제어(Pessimistic Concurrency Control)
      &lt;ul&gt;
        &lt;li&gt;사용자들이 같은 데이터를 동시에 수정할 것이라고 가정&lt;/li&gt;
        &lt;li&gt;데이터를 읽는 시점에 Lock을 걸고, 트랜잭션이 완료될 때까지 이를 유지&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 시점에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lock&lt;/code&gt;을 걸기 때문에, 시스템의 동시성을 심각하게 떨어뜨릴 수 있다.
          &lt;ul&gt;
            &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nowait&lt;/code&gt; 옵션과 함께 사용해야 한다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;낙관적 동시성 제어(Optimistic Concurrency Control)
      &lt;ul&gt;
        &lt;li&gt;사용자들이 같은 데이터를 동시에 수정하지 않을 것이라고 가정&lt;/li&gt;
        &lt;li&gt;데이터를 읽는 시점에 Lock을 걸지 않는 대신, 수정 시점에 값이 변경되었는 지를 반드시 검사한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(3) Locking 메커니즘의 문제점&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;읽기 작업과 쓰기 작업이 서로 방해를 일으키기 때문에 동시성 문제가 발생&lt;/li&gt;
    &lt;li&gt;데이터 일관성에 문제가 생기는 경우도 있어서 Lock을 더 오래 유지하거나 테이블 레벨의 Lock을 사용해야 하고, 동시성 저하 발생&lt;/li&gt;
    &lt;li&gt;이러한 문제를 해결하기 위해 MVCC 메커니즘이 탄생되었다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;2. MVCC(Multi-Version Concurrency Control, 다중 버전 동시성 제어)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;(1) MVCC란&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;동시 접근을 허용하는 데이터베이스에서 동시성을 제어하기 위해 사용하는 방법 중 하나&lt;/li&gt;
    &lt;li&gt;데이터에 접근하는 사용자는 접근한 시점에서 데이터베이스의 Snapshot을 읽는다.
      &lt;ul&gt;
        &lt;li&gt;이 snapshot 데이터에 대한 변경이 완료될 때(트랜잭션이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 될 때)까지 만들어진 변경사항은 다른 데이터베이스 사용자가 볼 수 없다.&lt;/li&gt;
        &lt;li&gt;이제 사용자가 데이터를 업데이트하면 이전의 데이터를 덮어 씌우는 게 아니라, 새로운 버전의 데이터를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNDO&lt;/code&gt; 영역에 생성한다.
          &lt;ul&gt;
            &lt;li&gt;대신, 이전 버전의 데이터와 비교해서 변경되 내록을 기록한다.&lt;/li&gt;
            &lt;li&gt;이렇게 해서 하나의 데이터에 대해 여러 버전의 데이터가 존재하게 되고, 사용자는 마지막 버전의 데이터를 읽게 된다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(2) MVCC의 특징&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;일반적인 RDBMS 보다 매우 빠르게 작동&lt;/li&gt;
    &lt;li&gt;데이터 버전이 충돌하면 애플리케이션 영역에서 이러한 문제를 해결해야 한다.&lt;/li&gt;
    &lt;li&gt;데이터를 읽기 시작할 때, 다른 사람이 그 데이터를 삭제하거나 수정하더라도 영향을 받지 않고 데이터를 사용할 수 있다.
      &lt;ul&gt;
        &lt;li&gt;대신, 사용하지 않는 데이터가 계속 쌓이게 되므로, 데이터를 정리하는 시스템 필요&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;UNDO 블록 I/O, CR Copy 생성, CR 블록 캐싱과 같은 부가적인 작업의 오버헤드가 발생한다.&lt;/li&gt;
    &lt;li&gt;이러한 구조의 MVCC는 문장수준과 트랜잭션 수준의 읽기 일관성이 존재한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;트랜잭션 1이 테이블 B의 첫 번째 행의 잠금을 얻고, 트랜잭션 2도 테이블 A의 첫 번째 행의 잠금을 얻었다고 하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner/raw/master/Database/images/deadlock.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transaction2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;트랜잭션을 commit 하지 않은 채 서로의 첫 번째 행에 대한 잠금을 요청하면, 아래와 같이 Deadlock이 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1213&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Deadlock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trying&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restarting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;53-교착상태의-빈도를-낮추는-방법&quot;&gt;&lt;strong&gt;5.3. 교착상태의 빈도를 낮추는 방법&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션을 자주 커밋한다.&lt;/li&gt;
  &lt;li&gt;정해진 순서로 테이블에 접근한다.
    &lt;ul&gt;
      &lt;li&gt;위에서 트랜잭션 1이 테이블 B -&amp;gt; A 의 순으로 접근했고, 트랜잭션 2는 테이블 A -&amp;gt; B 의 순으로 접근했다. 트랜잭션들이 동일한 테이블 순으로 접근하게 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;읽기 잠금 획득(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FOR UPDATE&lt;/code&gt;)의 사용을 피한다.&lt;/li&gt;
  &lt;li&gt;한 테이블의 복수 행을 복수의 연결에서 순서 없이 갱신하면 교착상태가 발생하기 쉽다.
    &lt;ul&gt;
      &lt;li&gt;이 경우에는 테이블 단위의 잠금을 획득해 갱신을 직렬화하면, 동시성은 떨어지지만 교착상태를 회피할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-statement-vs-preparedstatement&quot;&gt;&lt;strong&gt;6. Statement vs. PreparedStatement&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;61-javasqlstatement&quot;&gt;&lt;strong&gt;6.1. java.sql.Statement&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;정적 SQL 문을 실행하여, 작성된 결과를 돌려주기 위해 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statement&lt;/code&gt; 객체마다 1개의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResultSet&lt;/code&gt; 객체 만이 동시에 오픈 가능하다.
    &lt;ul&gt;
      &lt;li&gt;따라서, 1개의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResultSet&lt;/code&gt; 객체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;에 다른 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;가 끼어들면, 각각은 다른 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statement&lt;/code&gt; 객체에 의해 생성된 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statement&lt;/code&gt; 인터페이스의 모든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execution&lt;/code&gt; 메소드는 query의 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResultSet&lt;/code&gt; 객체로 오픈된 것이 존재한다면 이를 암묵적으로 닫는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;62-javasqlpreparedstatement&quot;&gt;&lt;strong&gt;6.2. java.sql.PreparedStatement&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;pre-compile 된 SQL 문을 나타내는 객체이다.
    &lt;ul&gt;
      &lt;li&gt;SQL 문은 pre-compile 되어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreparedStatement&lt;/code&gt; 객체에 포함된다.&lt;/li&gt;
      &lt;li&gt;이 객체는 query를 여러 차페 효율적으로 실행하는 목적으로 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statement&lt;/code&gt; 보다 속도 면에서 더 빠르다.
    &lt;ul&gt;
      &lt;li&gt;쿼리를 실행하기 전에 이미 쿼리가 컴파일되어 있으며, 반복 수행의 경우 프리 컴파일된 쿼리를 통해 수행이 이루어지기 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;쿼리 자체에 조건이 들어가는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic sql&lt;/code&gt;이 사용된다.
    &lt;ul&gt;
      &lt;li&gt;파싱 타임을 줄여주는 것은 분명하지만, 이로 인해 performance 저하를 고려해야 한다.&lt;/li&gt;
      &lt;li&gt;하지만, 성능을 고려할 때 시간 부분에서 가장 큰 비중을 차지하는 것은 테이블에서 레코드(row)를 가져오는 과정이며, SQL 문을 파싱하는 시간은 이 시간의 1/10에 불과하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL Injection 등의 문제를 보완해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-nosql&quot;&gt;&lt;strong&gt;7. NoSQL&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;71-nosql의-정의&quot;&gt;&lt;strong&gt;7.1. NoSQL의 정의&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) NoSQL이란&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;관계형 데이터 모델을 지양하며, 대량의 분산된 데이터를 저장하고 조회하는 데 특화되었으며, 스키마 없이 사용 가능하거나 느슨한 스키마를 제공하는 저장소&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) NoSQL의 특징&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;종류마자 쓰기/읽기 성능 특화, 2차 인덱스 지원, 오토 샤딩 지원과 같은 고유한 특징을 지닌다.&lt;/li&gt;
  &lt;li&gt;대량의 데이터를 빠르게 처리하기 위해 메모리에 임시 저장하고 응답하는 등의 방법을 사용한다.&lt;/li&gt;
  &lt;li&gt;동적인 스케일 아웃을 지원하기도 하며, 가용성을 위해 데이터 복제 등의 방법으로 관계형 세이터베이스가 제공하지 못하는 성능과 특징을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;72-cap-이론&quot;&gt;&lt;strong&gt;7.2. CAP 이론&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Consistency: 일관성&lt;/li&gt;
  &lt;li&gt;Availability: 가용성&lt;/li&gt;
  &lt;li&gt;Partition tolerance: 네트워크 분할 허용성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) Consistency: 일관성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다중 클라이언트에서 같은 시간에 조회하는 데이터는 항상 동일한 데이터임을 보증하는 것
    &lt;ul&gt;
      &lt;li&gt;일관성을 지원하지 않는 NoSQL을 사용한다면, 데이터의 일관성이 느슨하게 처리되어 동일한 데이터가 나타나지 않을 수 있다.
        &lt;ul&gt;
          &lt;li&gt;느슨하게 처리된다는 것은 데이터의 변경을 시간의 흐름에 따라 여러 노드에 전파하는 것을 의미한다.&lt;/li&gt;
          &lt;li&gt;최족적으로 일관성이 유지된다고 하여, 최종적 일관성 또는 궁극적 일관성을 지원한다고 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 동기화를 위해 사용하는 두 가지 방법
    &lt;ul&gt;
      &lt;li&gt;동기식 방법: 데이터의 저장 결과를 클라이언트로 응답하기 전에 모든 노드에 데이터를 저장
        &lt;ul&gt;
          &lt;li&gt;느린 응답 시간&lt;/li&gt;
          &lt;li&gt;데이터의 정합성을 보장한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;비동기식 방법: 메모리나 임시 파일에 기록하고 클라이언트에 먼저 응답한 다음, 특정 이벤트 또는 프로세스를 사용하여 노드로 데이터를 동기화
        &lt;ul&gt;
          &lt;li&gt;빠른 응답시간&lt;/li&gt;
          &lt;li&gt;쓰기 노드에 장애가 발생했을 경우 데이터를 손실할 가능성이 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Availability: 가용성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 클라이언트의 읽기와 쓰기 요청에 대하여 항상 응답이 가능해야 함을 보증하는 것(내고장성)&lt;/li&gt;
  &lt;li&gt;내고장성을 가진 NoSQL은 클러스터 내에서 몇 개의 노드가 망가지더라도 정상적인 서비스가 가능한다.&lt;/li&gt;
  &lt;li&gt;몇몇 NoSQL은 가용성을 보장하기 위해 데이터 복제(Replication)를 사용한다.
    &lt;ul&gt;
      &lt;li&gt;동일한 데이터를 다중 노드에 중복 저장하여, 그 중 몇 대의 노드가 고장나도 데이터가 유실되지 않도록 하는 방법&lt;/li&gt;
      &lt;li&gt;데이터 중복 저장 방법
        &lt;ul&gt;
          &lt;li&gt;Master-Slave 복제 방법: 동일한 데이터를 가징 저장소를 하나 더 생성하는 방법&lt;/li&gt;
          &lt;li&gt;Peer-to-Peer 복제 방법: 데이터 단위로 중복 저장하는 방법&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Partition tolerance: 네트워크 분할 허용성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;지역적으로 분할된 네트워크 환경에서 동작하는 시스템에서 두 지역 간의 내트워크가 단절되거나 네트워크 데이터 유실이 일어나더라도 각 지역 내에 시스템은 정상적으로 동작해야 하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;72-저장-방식에-따른-분류&quot;&gt;&lt;strong&gt;7.2. 저장 방식에 따른 분류&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Key-Value Model&lt;/li&gt;
  &lt;li&gt;Documnet Model&lt;/li&gt;
  &lt;li&gt;Column Model&lt;/li&gt;
  &lt;li&gt;Graph MOdel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) Key-Value Model&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;가장 기본적인 형태의 NoSQL&lt;/li&gt;
      &lt;li&gt;키 하나로 데이터 하나를 저장하고 조회할 수 있는 단일 키-값 구조를 갖는다.&lt;/li&gt;
      &lt;li&gt;단순한 저장구조로 인하여 복잡한 조회 연산은 지원하지 않는다.&lt;/li&gt;
      &lt;li&gt;고속 읽기와 쓰기에 최적화된 경우가 많다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;활용
    &lt;ul&gt;
      &lt;li&gt;사용자의 프로필 정보, 웹 서버 클러스터를 위한 세션 정보, 장바구니 정보, URI 단축 정보 저장 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;하나의 서비스 요청에 다수의 데이터 조회 및 수정 연산이 발생하면 트랜잭션 처리가 불가능하여 데이터 정합성을 보장할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;Redis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Document Model&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;키-값 모델을 개념적으로 확장한 구조&lt;/li&gt;
      &lt;li&gt;하나의 키에 하나의 구조화된 문서를 저장하고 조회한다.&lt;/li&gt;
      &lt;li&gt;논리적인 데이터 저장과 조회 방법이 관계형 데이터베이스와 유사하다.&lt;/li&gt;
      &lt;li&gt;키는 문서에 대한 ID로 표현된다.&lt;/li&gt;
      &lt;li&gt;저장된 문서를 컬렉션으로 관리하며, 문서 저장과 동시에 문서 ID에 대한 인덱스를 생성한다.
        &lt;ul&gt;
          &lt;li&gt;문서 ID에 대한 인덱스를 사용하여 O(1) 시간 안에 문서를 조회할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;B-tree 인덱스를 사용하여 2차 인덱스 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;활용
    &lt;ul&gt;
      &lt;li&gt;중앙 집중식 로그 저장, 타임 라인 저장, 통계 정보 저장 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;2차 인덱스 생성시 사용하는 B-tree 인덱스는 크기가 커질수록 새로운 데이터를 입력하거나 삭제할 때 성능이 저하된다.
        &lt;ul&gt;
          &lt;li&gt;읽기와 쓰기 비율이 7:3 정도일 때 가장 좋은 성능을 보인다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;MongoDB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Column Model&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;하나의 키에 여러 개의 컬럼 이름과 컬럼 값의 쌍으로 이루어진 데이터를 저장하고 조회한다.&lt;/li&gt;
      &lt;li&gt;모든 컬럼은 항상 타임 스탬프 값과 함꼐 저장된다.&lt;/li&gt;
      &lt;li&gt;Row key, Column key, Column Family와 같은 빅테이블 개념이 공통적으로 사용된다.&lt;/li&gt;
      &lt;li&gt;저장의 기본 단위는 컬럼으로, 컬럼은 컬럼 이름과 값, 타임스탬프로 구성된다.
        &lt;ul&gt;
          &lt;li&gt;로우(Row): 이러한 컬럼들의 집합&lt;/li&gt;
          &lt;li&gt;로우키(Row key): 각 로우를 유일하게 식별하는 값&lt;/li&gt;
          &lt;li&gt;키 스페이스(Key Space): 이러한 로우들의 집합&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;쓰기와 읽기 중 쓰기에 더 특화되어 있다.&lt;/li&gt;
      &lt;li&gt;데이터를 먼저 커밋 로그와 메모리에 저장한 후 응답하기 때문에 빠른 응답 속도를 제공한다.
        &lt;ul&gt;
          &lt;li&gt;읽기 연산 대비 쓰기 연산이 많은 서비스나 빠른 시간 안에 대량의 데이터를 입력하고 조회하는 서비스를 구현할 때 가장 좋은 성능을 보인다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;활용
    &lt;ul&gt;
      &lt;li&gt;채팅 내용 저장, 실시간 분석을 위한 데이터 저장소 등의 서비스 구현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;구글의 빅테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot;&gt;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/53&quot;&gt;https://mangkyu.tistory.com/53&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/다중_버전_동시성_제어&quot;&gt;https://ko.wikipedia.org/wiki/다중_버전_동시성_제어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://celdee.tistory.com/312&quot;&gt;https://celdee.tistory.com/312&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joosjuliet.github.io/index/&quot;&gt;https://joosjuliet.github.io/index/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongyang.tistory.com/75&quot;&gt;https://mongyang.tistory.com/75&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wkdtjsgur100.github.io/anomaly/&quot;&gt;https://wkdtjsgur100.github.io/anomaly/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chokyuhwan.tistory.com/22&quot;&gt;https://chokyuhwan.tistory.com/22&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/제1정규형&quot;&gt;https://ko.wikipedia.org/wiki/제1정규형&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/제2정규형&quot;&gt;https://ko.wikipedia.org/wiki/제2정규형&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/제3정규형&quot;&gt;https://ko.wikipedia.org/wiki/제3정규형&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://3months.tistory.com/193&quot;&gt;https://3months.tistory.com/193&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="CS" /><summary type="html">데이터베이스 1.1. 데이터베이스를 사용하는 이유 1.2. 데이터베이스의 특징 1.3. 데이터베이스의 성능</summary></entry><entry><title type="html">[MSA] 헷갈리는 개념 정리</title><link href="/MSA-01" rel="alternate" type="text/html" title="[MSA] 헷갈리는 개념 정리" /><published>2021-05-12T00:00:00+00:00</published><updated>2021-05-12T00:00:00+00:00</updated><id>/MSA-01</id><content type="html" xml:base="/MSA-01">&lt;h4 id=&quot;domain-driven-design&quot;&gt;&lt;strong&gt;[Domain-Driven Design]&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(1) Domain&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;해결하고 싶은 비즈니스 내 복잡한 문제들의 상위 영역&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Domain-Driven Design&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비즈니스 내 상위 수준의 복잡한 문제(domain)를 해결하는 소프트웨어 설계 기법의 하나&lt;/li&gt;
  &lt;li&gt;시스템을 구현하기 위한 특정 기술이 아니라 Domain과 그 로직이 중심이 되는 설계 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Domain-Driven Design의 목적&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어의 복잡한 부분을 연결하여 새로운 모델에서 복잡한 Application을 만드는 것을 쉽게 해줌&lt;/li&gt;
  &lt;li&gt;업무전문가, 현업, 도메인 전문가, 개발자 간의 언어 및 사고방식의 간극을 해결&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ubiquitous-language&quot;&gt;&lt;strong&gt;[Ubiquitous language]&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;도메인 전문가와 개발자가 도메인을 이해하는데 공동으로 사용하는 언어&lt;/li&gt;
  &lt;li&gt;프로젝트를 수행하는 조직 내에서 유효한 언어&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;devops&quot;&gt;&lt;strong&gt;[DevOps]&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;현업, IT 개발 및 운영 간 밀접한 협업을 촉진하는 민첩한 소프트웨어 방식&lt;/li&gt;
  &lt;li&gt;Dev(생산성 향상)와 Ops(안전성 보장) 간의 목적을 일치시키고 프로세스와 도구에 대한 접근 공유&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;microservice-개요&quot;&gt;&lt;strong&gt;[Microservice 개요]&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;1-microservice의-장단점&quot;&gt;&lt;strong&gt;1. Microservice의 장단점&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;특성에 맞게 자원을 할당하여 scale-out 하므로, 효율적인 자원 사용 가능&lt;/li&gt;
  &lt;li&gt;개발 조직과 회사 조직에 유연한 개발문화 영향&lt;/li&gt;
  &lt;li&gt;서비스 간 의존도가 낮아 다른 서비스에 영향을 미칠 가능성이 적음&lt;/li&gt;
  &lt;li&gt;서비스 단위로 독립적인 배포가 가능&lt;/li&gt;
  &lt;li&gt;각 서비스는 독립적으로 요구사항에 맞는 다양한 언어로 개발 가능&lt;/li&gt;
  &lt;li&gt;다른 서비스와는 관계없이 신속한 의사결정 및 독립적인 테스트 가능&lt;/li&gt;
  &lt;li&gt;개발자는 특정 서비스에만 집중할 수 있기 때문에 코드에 대한 높은 이해도 습득 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;각 서비스 담당팀이 물리적으로 같은 곳에 있지 않는 경우 의사소통이 어려움&lt;/li&gt;
  &lt;li&gt;분산된 데이터로 인해 데이터 정합성을 위한 노력 필요&lt;/li&gt;
  &lt;li&gt;서비스들을 통합적으로 모니터링하기 어려움&lt;/li&gt;
  &lt;li&gt;서비스 간 통신에 대한 처리가 추가적으로 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2-microservice-특징&quot;&gt;&lt;strong&gt;2. Microservice 특징&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 프로젝트가 아닌 제품&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;빠른 개발 후 반응을 통해 개선하는 방식&lt;/li&gt;
  &lt;li&gt;Microservice 팀은 제품의 전체 라이프사이클을 책임져야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 비즈니스 역량 기반의 팀&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기술이 아닌 업무 중심으로 팀 구성&lt;/li&gt;
  &lt;li&gt;서비스를 처음부터 끝까지 만들기 위해 필요한 모든 기술을 갖추어야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 서비스를 통한 컴포넌트화&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 전체 서비스를 여러 개의 관리 가능한 컴포넌트로 분할하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) 정책 적용의 분권화&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;필요한 것은 모두 팀이 결정(개발언어 및 방법론)&lt;/li&gt;
  &lt;li&gt;중앙 거버넌스(governance) 팀이 존재
    &lt;ul&gt;
      &lt;li&gt;전체 서비스의 변경사항과 결정이 필요한 사항에 대해 보고&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) 단순하고 쉬운 연계&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;끝지점에서 서비스의 연결과 메세지 처리&lt;/li&gt;
  &lt;li&gt;메세지 전달만을 위한 단순한 파이프 선호&lt;/li&gt;
  &lt;li&gt;느슨한 서비스 연결을 위해 가벼운 메세지 버스를 주로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(6) 실패(장애)를 극복하기 위한 설계&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;장애가 서비스에 영향을 줄 수 없도록 설계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(7) 데이터 관리의 분권화&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;각 서비스에서 자체 데이터를 관리하도록 설계&lt;/li&gt;
  &lt;li&gt;다른 서비스의 저장소 호출 불가&lt;/li&gt;
  &lt;li&gt;API를 통해서만 접근 가능&lt;/li&gt;
  &lt;li&gt;데이터 정합성 문제 해결 필요(결과적 일관성)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(8) 인프라 자동화&lt;/p&gt;

&lt;p&gt;(9) 진화하는 설계&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;변화에 쉽게 대응할 수 있도록 작은 규모의 조직 구성&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="MSA" /><summary type="html">[Domain-Driven Design]</summary></entry><entry><title type="html">[MSA] Kafka</title><link href="/MSA-Kafka" rel="alternate" type="text/html" title="[MSA] Kafka" /><published>2021-05-12T00:00:00+00:00</published><updated>2021-05-12T00:00:00+00:00</updated><id>/MSA-Kafka</id><content type="html" xml:base="/MSA-Kafka">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Message Queue&lt;/strong&gt; &lt;br /&gt;
1.1. Message Queue란 &lt;br /&gt;
1.2. Message Queue의 유형&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kafka&lt;/strong&gt; &lt;br /&gt;
2.1. Kafka 아키텍쳐 &lt;br /&gt;
2.2. Producer와 Consumer Group &lt;br /&gt;
 2.2.1. 메시지 생산/소비 &lt;br /&gt;
 2.2.2. Partition과 Consumer의 개수 &lt;br /&gt;
2.3. Consumer Design &lt;br /&gt;
2.4. Replication&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kafka를 사용할 때의 주의점&lt;/strong&gt; &lt;br /&gt;
3.1. 메시지 중복 consume, At-least-once &lt;br /&gt;
3.2. Consume 메시지의 순서&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-message-queue&quot;&gt;&lt;strong&gt;1. Message Queue&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;11-message-queue란&quot;&gt;&lt;strong&gt;1.1. Message Queue란&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 정의&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지 지향 미들웨어(MOM, Message Oriented Middleware)는 비동기 메시지를 사용하는 다른 응용 프로그램 사이에서 데이터 송수신을 의미한다.&lt;/li&gt;
  &lt;li&gt;MOM을 구현한 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;12-message-queue의-유형&quot;&gt;&lt;strong&gt;1.2. Message Queue의 유형&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 구독/발행(pub-sub, publish-and-subscribe)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지 목적에 topic을 사용
    &lt;ul&gt;
      &lt;li&gt;topic: 네이밍 서비스로 초기화되고 저장되며, 클라이언트는 토픽의 네이밍 서비스의 룩업을 사용해서 토픽 참조를 얻어낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메시지 흐름(Message Flow): 메시지 생산자(Producer)가 토픽에 메세지를 출판(publish)하면, 해당 토픽에 구독(subscribe)하고 있는 모든 메시지 소비자는 메시지를 수신할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;하나의 메시지를 여러 개의 메시지 소비자가 동시에 수신하게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 지점간 연결(point-to-point)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지 목적지에 Queue를 사용한다.&lt;/li&gt;
  &lt;li&gt;토픽과 마찬가지로 네이밍 서비스로 초기화되고 클라이언트는 네이밍 서비스 룩업을 통해 큐의 참조를 얻는다.&lt;/li&gt;
  &lt;li&gt;메시지 흐름 관점에서 메시지 생산자가 큐에 메시지를 전송하면, 그 메시지는 메시지 소비자가 메시지를 큐에서 가져갈 때까지 큐에 남아 있는다.
    &lt;ul&gt;
      &lt;li&gt;메시지 소비자가 메시지를 수신하면 해당 큐의 다른 소비자들은 그 메시지를 수신할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버 간의 연동에서 사용
    &lt;ul&gt;
      &lt;li&gt;모든 메시지는 요청한 메시지에 대한 한 번의 처리가 이루어져야 하기 때문&lt;/li&gt;
      &lt;li&gt;서비스 서버 즉, 메시지 큐 서버에 접속하는 클라이언트들은 메시지를 송신하는 쪽과 수신하는 쪽이 동일한 플랫폼일 경우가 없기 때문에, 다양한 언어로 구현될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;13-message-queue의-장점&quot;&gt;&lt;strong&gt;1.3. Message Queue의 장점&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 비동기(Asynchronous)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Queue에 넣기 때문에 나중에 처리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 비동조(Decoupling)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션과 분리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 탄력성(Resilience)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;일부가 실패하여도 전체에 영향을 주지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) 과잉(Redundancy)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;실패할 경우 재실행 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) 보증(Guarantees)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;작업이 처리된 걸 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(6) 확장성(Scalable)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다수의 프로세스들이 큐에 메시지를 보낼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-kafka&quot;&gt;&lt;strong&gt;2. Kafka&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;21-kafka-아키텍쳐&quot;&gt;&lt;strong&gt;2.1. Kafka 아키텍쳐&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F99745A4B5E633AF32148ED&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) Broker&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka Server&lt;/li&gt;
  &lt;li&gt;한 클러스터 내에서 Kafka Server는 여러 대 띄울 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Zookeeper(Apache Zookeeper)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클러스터 최신 설정정보 관리, 동기화 리더 채택 등 클러스터의 서버들이 공유하는 데이터를 관리하기 위해 사용된다.
    &lt;ul&gt;
      &lt;li&gt;Broker에 분산 처리된 메시지 큐의 정보들을 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클러스터를 관리하는 Zookeeper가 없으면 Kafka의 구동이 불가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Topic&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지가 생산되고 소비되는 주제&lt;/li&gt;
  &lt;li&gt;주제에 따라 여러 topic을 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) Partition&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Topic 내에서 메시지가 분산되어 저장되는 단위
    &lt;ul&gt;
      &lt;li&gt;한 Topic에 Partition이 3개가 있다면, 3개의 Partition에 대해서 메시지가 분산되어 저장된다.&lt;/li&gt;
      &lt;li&gt;이 때, Queue 방식으로 저장되므로 Partition의 끄트머리에 저장되어 Partition 내에서는 순서를 보장해주지만, Partition 끼리는 메시지 순서를 보장해주지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) Log&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Partition의 한 칸&lt;/li&gt;
  &lt;li&gt;key, value, timestamp로 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(6) offset&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Partition의 각 메시지를 식별할 수 있는 유니크한 값
    &lt;ul&gt;
      &lt;li&gt;메시지를 소비하는 Consumer가 읽을 차례를 의미하므로 Partition마다 별도로 관리된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;0부터 시작하여 1씩 증가&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;22-producer와-consumer-group&quot;&gt;&lt;strong&gt;2.2. Producer와 Consumer Group&lt;/strong&gt;&lt;/h5&gt;
&lt;h5 id=&quot;221-메시지-생산소비&quot;&gt;&lt;strong&gt;2.2.1. 메시지 생산/소비&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F998728405E6370AA1FC4A9&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) Producer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정해진 Topic으로 메시지를 기록&lt;/li&gt;
  &lt;li&gt;Partition이 여러 개 있는 경우, 기록될 Partition의 선택은 기본적으로 RR(Round-Robin) 방식을 따른다.
    &lt;ul&gt;
      &lt;li&gt;Partition이 여러 개 있으면 병렬 처리라는 이점이 있지만, 개수는 주의하여 설정해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;각 Partition 내에서는 가장 마지막 offset 뒤에 신규 메시지가 저장되므로, Partition 내에서는 순서가 보장되며 기록된다.&lt;/li&gt;
  &lt;li&gt;실제 메시지가 사용되는 순서는 보장되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Consumer Group&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 Topic을 담당
    &lt;ul&gt;
      &lt;li&gt;Topic은 여러 개의 Consumer Group이 접근할 수 있지만, 하나의 Consumer Group은 하나의 Topic에만 접근할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;존재하는 이유
    &lt;ul&gt;
      &lt;li&gt;partition에 접근하는 Consumer 관리
        &lt;ul&gt;
          &lt;li&gt;Consumer Group 내에서 Consumer 인스턴스들은 Topic 내에 Partition에서 다음에 소비할 offset이 어디인지 공유하면서 메시지를 소비한다. 따라서, 다음에 소비할 offset을 잘 관리할 수 있다.&lt;/li&gt;
          &lt;li&gt;Consumer Group이 없을 경우, 하나의 Partition에 2개의 Consumer가 동시에 접근한다면, 어떤 Consumer가 몇 번의 offset을 소비해야 하는 지 알 수 없게 된다.&lt;/li&gt;
          &lt;li&gt;즉, Consumer Group을 통해 하나의 Partition에는 하나의 Consumer 인스턴스만 접근할 수 있도록 관리한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;offset을 공유하여 고가용성을 확보
        &lt;ul&gt;
          &lt;li&gt;Partition에는 하나의 Consumer 인스턴스만 접근할 수 있기 때문에, 특정 Consumer 인스턴스에 에러가 발생했을 시, 다른 Consumer 인스턴스는 에러가 발생한 Consumer 인스턴스가 소비하던 Partition을 소비하게 된다.&lt;/li&gt;
          &lt;li&gt;즉, Consumer가 다운될 때를 대비해 Consumer Group의 Consumer 인스턴스들은 offset을 공유하고 있으며, 이를 통해 고가용성이 확보된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;222-partition과-consumer의-개수&quot;&gt;&lt;strong&gt;2.2.2. Partition과 Consumer의 개수&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Partition은 하나의 Consumer만 접근 가능하다.&lt;/li&gt;
  &lt;li&gt;Consumer는 여러 개의 Partition을 소비할 수 있다.&lt;/li&gt;
  &lt;li&gt;Partition의 개수 &amp;gt;= Consumer의 개수로 유지&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Partition의 개수 &amp;gt;= Consumer의 개수로 유지해야 하는 이유&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;(대량의 메시지가 Kakfa에 쓰여진다고 가정)&lt;/p&gt;

  &lt;p&gt;(1) Partition: 1개 / Consumer 인스턴스: 1개&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;메시지가 대량으로 생산되고 있지만, 처리할 수 있는 Consumer가 1개 뿐이다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(2) Partition: 1개 / Consumer 인스턴스: 4개&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Consumer 3개 증가&lt;/li&gt;
    &lt;li&gt;Consumer Group에서 Partition은 하나의 Consumer 밖에 접근할 수 없기 때문에, 개수를 증가해도 소용이 없다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(3) Partition: 4개 / Consumer 인스턴스: 4개&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Partition 3개 증가&lt;/li&gt;
    &lt;li&gt;1:1 구성
      &lt;ul&gt;
        &lt;li&gt;이상적: Consumer는 하나의 Partition에 접근할 수 있으므로&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(4) Partition: 4개 / Consumer 인스턴스: 3개&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Consumer 1개 죽어버림&lt;/li&gt;
    &lt;li&gt;문제없음
      &lt;ul&gt;
        &lt;li&gt;Consumer Group에서 offset이 공유되고 있으므로, Consumer가 하나 죽더라도 다른 Consumer가 해당 Partition에 접근하면 되기 때문&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(5) Partition: 3개 / Consumer 인스턴스: 3개&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Partition을 3개로 줄이려고 했으나, 한 번 늘린 Partition은 줄일 수 없다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;23-consumer-design&quot;&gt;&lt;strong&gt;2.3. Consumer Design&lt;/strong&gt;&lt;/h5&gt;

&lt;h5 id=&quot;24-replication&quot;&gt;&lt;strong&gt;2.4. Replication&lt;/strong&gt;&lt;/h5&gt;

&lt;h4 id=&quot;3-kafka를-사용할-때의-주의점&quot;&gt;&lt;strong&gt;3. Kafka를 사용할 때의 주의점&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&quot;31-메시지-중복-consume-at-least-once&quot;&gt;&lt;strong&gt;3.1. 메시지 중복 consume, At-least-once&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;기본적으로 한 Partition에는 Consumer Group의 하나의 Consumer만 메시지를 가져올 수 있다.&lt;/li&gt;
  &lt;li&gt;Kafka의 at-least-once 정책
    &lt;ul&gt;
      &lt;li&gt;Kafka 토픽에 메시지 A가 담겨있다고 가정했을 때, 특정 그룹의 Consumer는 토픽에 대해 메시지를 Consume한 뒤 이에 대한 특정 일을 처리하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt;을 할 것이다.&lt;/li&gt;
      &lt;li&gt;이러한 일련의 작업을 하다보면 이미 처리했다고 생각한 메시지 A가 다시 한 번 consume되는 현상이 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;메시지 중복 consume이 발생할 수 있는 상황&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;클라이언트가 메시지를 보내려고 시도할 때 네트워크 에러가 발생한다면, 메시지 발행 재시도로 인해서 잠재적으로 중복 메시지를 쌓을 수 있다.
      &lt;ul&gt;
        &lt;li&gt;메시지가 전송되기 전에 장애가 일어났다면, 중복은 발생하지 않는다.&lt;/li&gt;
        &lt;li&gt;메시지가 카프카의 log에 쌓인 이후이지만, log에 쌓였다는 응답이 publisher에게 돌아오기 전에 네트워크 장애가 발생하였다면, 중복이 발생할 수 있다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Consumer가 토픽으로부터 메시지를 읽었는데 크래시가 발생한다면, Consumer가 재시작하거나 다른 인스턴스가 consume 하려고 할 때 이미 읽은 메시지부터 읽게 된다.
      &lt;ul&gt;
        &lt;li&gt;카프카에서 메시지를 consume해서 이에 대한 task A를 처리하였다.&lt;/li&gt;
        &lt;li&gt;일을 완료한 후, 해당 메시지의 offset까지 처리하였음을 의미하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt;을 하길 원했다.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 도중에 어떠한 이유로 장애가 발생했다.
          &lt;ul&gt;
            &lt;li&gt;이미 해당 메시지에 대해 task A를 처리하였는데, 동일 메시지가 다시금 consume 되었다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;또는 리밸런싱(rebalancing) 시에 발생할 수도 있다.
          &lt;ul&gt;
            &lt;li&gt;리밸런싱(rebalancing): Consumer Group 내에 변동이 생기면 Partition과 짝을 맞출 Consumer를 다시 재분배 하는 것&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;32-consume-메시지의-순서&quot;&gt;&lt;strong&gt;3.2. Consume 메시지의 순서&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;(1) 원인&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka는 하나의 Partition에 쌓인 메시지의 순서는 보장해주는 반면, 서로 다른 Partition에 대해서는 순서를 보장해주지 않기 때문.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 해결책&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Partition을 하나로 구성한다.&lt;/li&gt;
  &lt;li&gt;publish 할 때마다 Partition을 지정하여 메시지를 전송하면 일부 순서를 보장할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출처&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지 큐 기반 모바일 서비스 환경에서의 통신 프로세스간 성능 향상에 대한 연구(&lt;a href=&quot;http://163.239.1.207:8088/dl_image/IMG/03//000000012227/SERVICE/000000012227_01.PDF&quot;&gt;http://163.239.1.207:8088/dl_image/IMG/03//000000012227/SERVICE/000000012227_01.PDF&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://limdh3325.blogspot.com/2019/11/message-queue.html&quot;&gt;https://limdh3325.blogspot.com/2019/11/message-queue.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://victorydntmd.tistory.com/344&quot;&gt;https://victorydntmd.tistory.com/344&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jays1204.github.io/kafka/2017/07/12/kafka-caution.html&quot;&gt;http://jays1204.github.io/kafka/2017/07/12/kafka-caution.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="MSA" /><summary type="html">Message Queue 1.1. Message Queue란 1.2. Message Queue의 유형</summary></entry><entry><title type="html">[Spring] @Transactional</title><link href="/Spring-03" rel="alternate" type="text/html" title="[Spring] @Transactional" /><published>2021-05-12T00:00:00+00:00</published><updated>2021-05-12T00:00:00+00:00</updated><id>/Spring-03</id><content type="html" xml:base="/Spring-03">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring에서 트랜잭션을 처리하는 방법&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring 트랜잭션 속성&lt;/strong&gt; &lt;br /&gt;
2.1. isolation(격리 수준) &lt;br /&gt;
2.2. propagation(전파 옵션) &lt;br /&gt;
2.3. readOnly(읽기 전용)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-spring에서-트랜잭션을-처리하는-방법&quot;&gt;&lt;strong&gt;1. Spring에서 트랜잭션을 처리하는 방법&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;스프링에서는 트랜잭션 처리를 지원하며, 그 중 annotation 방법으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;을 선언하는 방법이 일반적이다(선언적 트랜잭션).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;이 annotation이 추가되면 이 클래스에 트랜잭션 기능이 적용된 프록시 객체가 생성된다.&lt;/li&gt;
      &lt;li&gt;프록시 객체: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;이 포함된 메소드가 호출될 경우, PlatformTransactionManager를 사용하여 트랜잭션을 시작하고, 정상 여부에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rollback&lt;/code&gt; 한다.&lt;/li&gt;
      &lt;li&gt;해당 annotation을 적용하면, 적용된 클래스 또는 메소드에 트랜잭션이 적용된다.
        &lt;ul&gt;
          &lt;li&gt;로직 흐름에 따라 전체적으로 트랜잭션을 적용할 것인지, 아니면 특정 메소드에만 적용할 것인지 전략을 잘 세워야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-spring-트랜잭션-속성&quot;&gt;&lt;strong&gt;2. Spring 트랜잭션 속성&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;isolation(격리 수준)&lt;/li&gt;
  &lt;li&gt;propagation(전파 옵션)&lt;/li&gt;
  &lt;li&gt;readOnly(읽기 전용)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;21-isolation격리-수준&quot;&gt;&lt;strong&gt;2.1. isolation(격리 수준)&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션에서 일관성이 없는 데이터를 허용하도록 하는 수준&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEFAULT&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기본 격리 수준(기본 설정, DB의 Isolation Level을 따름)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READ_UNCOMMITTED&lt;/code&gt;(level 0)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;커밋되지 않은(트랙잭션 처리 중인) 데이터에 대한 읽기를 허용
    &lt;ul&gt;
      &lt;li&gt;어떤 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 B라는 아직 완료되지 않은(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncommited&lt;/code&gt; 혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dirty&lt;/code&gt;) 데이터 B를 읽을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Dirty Read 발생&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;다른 트랜잭션에서 처리하는 작업이 완료되지 않았는데도 다른 트랜잭션에서 볼 수 있는 현상&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READ_UNCOMMITTED&lt;/code&gt; 격리수준에서만 일어나는 현상&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READ_COMMITTED&lt;/code&gt;(level 1)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 커밋된 확정 데이터만 읽기 허용
    &lt;ul&gt;
      &lt;li&gt;어떠한 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 해당 데이터에 접근할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dirty Read 방지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REPEATABLE_READ&lt;/code&gt;(level 2)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 완료될 때 까지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 문이 사용하는 모든 데이터에 shared lock이 걸리므로, 다른 사용자는 그 영역에 해당하는 데이터에 대한 수정이 불가능하다.&lt;/li&gt;
  &lt;li&gt;선행 트랜잭션이 읽은 데이터는 트랜잭션이 종료될 때까지 후행 트랜잭션이 갱신하거나 삭제가 불가능하기 때문에 같은 데이터를 두 번 쿼리했을 때 일관성 있는 결과를 리턴한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Non-Repeatable Read 방지&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;한 트랜잭션 내에서 같은 쿼리를 두 번 수행할 때 그 사이에 다른 트랜잭션이 값을 수정 또는 삭제함으로써 두 쿼리의 결과가 상이하게 나타나는 비일관성이 발생하는 현상&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(5) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERIALIZABLE&lt;/code&gt;(level 3)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;완벽한 읽기 일관성 모드를 제공&lt;/li&gt;
  &lt;li&gt;데이터의 일관성 및 동시성을 위해 MVCC(Multi Version Concurrency Control)을 사용하지 않음
    &lt;ul&gt;
      &lt;li&gt;MVCC
        &lt;ul&gt;
          &lt;li&gt;다중 사용자 데이터베이스 성능 기술&lt;/li&gt;
          &lt;li&gt;데이터 조회 시 lock을 사용하지 않고 데이터 버전을 관리해 데이터의 일관성 및 동시성을 높이는 기술&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션이 완료될 때 까지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 문이 사용하는 모든 데이터에 shared lock이 걸리므로, 다른 사용자는 그 영역에 해당하는 데이터에 대한 수정 및 입력이 불가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Phantom Read 방지&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;한 트랜잭션 안에서 일정 범위의 레코드를 두 번 이상 읽을 때, 첫 번째 쿼리에서 없던 레코드가 두 번째 쿼리에서 나타나는 현상&lt;/li&gt;
    &lt;li&gt;이는 트랜잭션 도중에 새로운 레코드가 삽입되는 것을 허용하기 때문에 나타나는 현상&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;22-propagation전파-옵션&quot;&gt;&lt;strong&gt;2.2. Propagation(전파 옵션)&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션 동작 도중 다른 트랜잭션을 호출하는 상황에 선택할 수 있는 옵션&lt;/li&gt;
  &lt;li&gt;이 속성을 통해 피호출 트랜잭션의 입장에서는 호출한 쪽의 트랜잭션을 그대로 사용할 수도, 새롭게 트랜잭션을 생성할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUIRED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;디폴트 속성&lt;/li&gt;
  &lt;li&gt;부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUPPORTS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이미 시작된 트랜잭션이 있으면 참여하고, 그렇지 않으면 트랜잭션 없이 진행하게 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUIRES_NEW&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;부모 트랜잭션을 무시하고 무조건 새로운 트랜잭션이 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MANDATORY&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUIRED&lt;/code&gt;와 비슷하게 이미 시작된 트랜잭션이 있으면 참여한다.
    &lt;ul&gt;
      &lt;li&gt;반면에 트랜잭션이 시작된 것이 없으면, 새로 시작하는 대신 예외를 발생시킨다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;혼자서는 독립적으로 트랜잭션을 진행하면 안되는 경우에 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(5) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT_SUPPORTED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션을 사용하지 않게 한다.&lt;/li&gt;
  &lt;li&gt;이미 진행 중인 트랜잭션이 있으면 트랜잭션을 보류시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(6) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NEVER&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션을 사용하지 않도록 강제한다.&lt;/li&gt;
  &lt;li&gt;이미 진행 중인 트랜잭션도 존재하면 안되며, 진행 중인 트랜잭션이 있다면 예외를 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(7) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NESTED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이미 진행 중인 트랜잭션이 있으면 중첩 트랜잭션을 시작한다.&lt;/li&gt;
  &lt;li&gt;중첩 트랜잭션은 트랜잭션 안에 다시 트랜잭션을 만드는 것이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SAVEPOINT&lt;/code&gt;를 지정한 시점까지 롤백이 가능하다는 점에서 독립적인 트랜잭션을 만드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUIRES_NEW&lt;/code&gt;와는 다르다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;23-readonly&quot;&gt;&lt;strong&gt;2.3. readOnly&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션을 읽기 전용으로 설정할 수 있다.&lt;/li&gt;
  &lt;li&gt;성능을 최적화하기 위해 사용할 수도 있고, 특정 트랜잭션 작업 안에서 쓰기 작업이 일어나는 것을 의도적으로 방지하기 위해 사용할 수도 있다.&lt;/li&gt;
  &lt;li&gt;일부 트랜잭션 매니저의 경우 읽기 전용 속성을 무시하고 쓰기 작업을 허용할 수도 있기 때문에 주의가 필요하다.&lt;/li&gt;
  &lt;li&gt;일반적으로 읽이 전용 트랜잭션이 시작된 이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;와 같은 쓰기 작업이 진행되면 예외가 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출처: &lt;a href=&quot;https://velog.io/@sa833591/Spring-Transactional-옵션&quot;&gt;https://velog.io/@sa833591/Spring-Transactional-옵션&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Spring" /><summary type="html">Spring에서 트랜잭션을 처리하는 방법</summary></entry><entry><title type="html">Part 1-2. 자료구조</title><link href="/CS-Data-Structure" rel="alternate" type="text/html" title="Part 1-2. 자료구조" /><published>2021-05-11T00:00:00+00:00</published><updated>2021-05-11T00:00:00+00:00</updated><id>/CS-Data-Structure</id><content type="html" xml:base="/CS-Data-Structure">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Array vs. Linked List&lt;/strong&gt; &lt;br /&gt;
1.1. Array &lt;br /&gt;
1.2. Linked List&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Stack and Queue&lt;/strong&gt; &lt;br /&gt;
2.1. Stack &lt;br /&gt;
2.2. Queue&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tree&lt;/strong&gt; &lt;br /&gt;
3.1. Binary Tree(이진 트리)&lt;br /&gt;
3.2. Binary Tree(이진 트리)의 종류 &lt;br /&gt;
3.3. BST(Binary Search Tree)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Binary Heap&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Red Black Tree(RBT)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;5.1. Red Black Tree의 정의 &lt;br /&gt;
5.2. Red Black Tree의 특징 &lt;br /&gt;
5.3. Red Black Tree의 삽입 &lt;br /&gt;
5.4. Red Black Tree의 삭제&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hash Table&lt;/strong&gt; &lt;br /&gt;
6.1. Hash Function &lt;br /&gt;
6.2. Resolve Conflict&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1--array-vs-linked-list&quot;&gt;&lt;strong&gt;1.  Array vs. Linked List&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;11-array&quot;&gt;&lt;strong&gt;1.1. Array&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가장 기본적인 자료구조&lt;/li&gt;
  &lt;li&gt;논리적 저장 순서와 물리적 저장 순서가 일치
    &lt;ul&gt;
      &lt;li&gt;인덱스(index)로 해당 원소(element)에 접근할 수 있다.&lt;/li&gt;
      &lt;li&gt;random access 가능: 찾고자 하는 원소의 인덱스 값을 알고 있으면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Big-O(1)&lt;/code&gt;에 해당 원소로 접근할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 단점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;삭제 또는 삽입의 과정에서는 해당 원소에 접근하여 작업을 완료한 뒤(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o(n)&lt;/code&gt;), 또 한 가지의 작업을 추가적으로 해 줘야 하기 때문에, 시간이 더 걸린다.
    &lt;ul&gt;
      &lt;li&gt;삭제하는 경우
        &lt;ul&gt;
          &lt;li&gt;만약 배열의 원소 중 어느 원소를 삭제했다고 했을 때, 배열의 연속적인 특징이 깨지게 된다(빈 공간이 발생).&lt;/li&gt;
          &lt;li&gt;삭제한 원소보다 큰 인덱스를 갖는 원소들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; 해 줘야 하는 비용(cost)이 발생하고, 이 경우의 시간 복잡도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;이 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;삽입하는 경우
        &lt;ul&gt;
          &lt;li&gt;첫 번째 자리에 새로운 원소를 추가하고자 한다면, 모든 원소들의 인덱스를 1씩 shift 해 줘야 하므로, 이 경우에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 의 시간을 요구하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;12-linked-list&quot;&gt;&lt;strong&gt;1.2. Linked List&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Array를 삭제 또는 삽입하는 과정에서 발생하는 문제를 해결하기 위한 자료구조&lt;/li&gt;
  &lt;li&gt;각각의 원소들은 자기 자신 다음에 어떤 원소가 있는지 만을 기억하고 있다.
    &lt;ul&gt;
      &lt;li&gt;이 부분만 다른 값으로 바꿔주면 삭제와 삽입을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 만에 해결할 수 있는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 문제&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원하는 위치에 삽입을 하고자 하면 원하는 위치를 Search 해야 하고, 이 과정에서 첫 번째 원소부터 모두 다 확인해봐야 한다.
    &lt;ul&gt;
      &lt;li&gt;Array 와는 달리 논리적 저장 순서와 물리적 저장 순서가 일치하지 않기 때문&lt;/li&gt;
      &lt;li&gt;삽입하고 정렬하는 것과 마찬가지이다.&lt;/li&gt;
      &lt;li&gt;어떠한 원소를 삭제 또는 추가하고자 했을 때, 그 원소를 찾기 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 의 시간이 추가적으로 발생하게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;검색/삽입/삭제 에 대해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 의 시간 복잡도를 갖는다.&lt;/li&gt;
  &lt;li&gt;Tree의 근간이 되는 자료구조&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-stack-and-queue&quot;&gt;&lt;strong&gt;2. Stack and Queue&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;21-stack&quot;&gt;&lt;strong&gt;2.1. Stack&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;선형 자료구조의 일종&lt;/li&gt;
  &lt;li&gt;LIFO(Last In First Out)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;22-queue&quot;&gt;&lt;strong&gt;2.2. Queue&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;선형 자료구조의 일종&lt;/li&gt;
  &lt;li&gt;FIFO(First In First Out)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-tree&quot;&gt;&lt;strong&gt;3. Tree&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(1) 정의&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스택이나 큐와 같은 선형 구조가 아닌 비선형 자료구조&lt;/li&gt;
  &lt;li&gt;계층적 관계(Relationship)을 표현하는 자료구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 트리를 구성하고 있는 요소들(용어)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node(노드): 트리를 구성하고 있는 각각의 요소&lt;/li&gt;
  &lt;li&gt;Edge(간선): 트리를 구성하기 위해 노드와 노드를 연결하는 선&lt;/li&gt;
  &lt;li&gt;Root Node(루트 노드): 트리 구조에서 최상위에 있는 노드&lt;/li&gt;
  &lt;li&gt;Terminal Node(단말 노드, leaf Node): 하위에 다른 노드가 연결되어 있지 않는 노드&lt;/li&gt;
  &lt;li&gt;Internal Node(내부 노드, 비단말 노드): 단말 노드를 제외한 모든 노드, 루트 노드를 포함&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;31-binary-tree이진-트리&quot;&gt;&lt;strong&gt;3.1. Binary Tree(이진 트리)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;루트 노드를 중심으로 두 개의 서브 트리(큰 트리에 속하는 작은 트리)로 나뉘어 진다.
    &lt;ul&gt;
      &lt;li&gt;나뉘어진 두 서브 트리도 모두 이진 트리여야 한다.&lt;/li&gt;
      &lt;li&gt;공집합도 이진트리로 포함시켜야 한다.&lt;/li&gt;
      &lt;li&gt;각 층별로 숫자를 매겨서 이를 트리의 Level 이라 한다.
        &lt;ul&gt;
          &lt;li&gt;레벨의 값은 0부터 시작하며, 따라서 루트 노드의 레벨은 0이다.&lt;/li&gt;
          &lt;li&gt;height: 트리의 최고 레벨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;배열로 구성된 Binary Tree는 노드의 개수가 n이고 root가 0이 아닌 1에서 시작할 때, i번째 노드에 대해서 아래의 index를 갖는다.
    &lt;ul&gt;
      &lt;li&gt;parent(i) = i/2&lt;/li&gt;
      &lt;li&gt;left_child(i) = 2i&lt;/li&gt;
      &lt;li&gt;right_child(i) = 2i+1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.2. Binary Tree(이진 트리)의 종류&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(1) Perfect Binary Tree(포화 이진 트리)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 레벨이 꽉 찬 이진 트리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) Complete Binary Tree(완전 이진 트리)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;위에서 아래로, 왼쪽에서 오른쪽으로 순서대로 차곡차곡 채워진 이진 트리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Full Binary Tree(정 이진 트리)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 노드가 0개 혹은 2개의 자식 노드만을 갖는 이진 트리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.3. BST(Binary Search Tree)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이진 탐색 트리에는 데이터를 저장하는 규칙이 존재: 이 규칙은 특정 데이터의 위치를 찾는 데 사용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;규칙 1. 이진 탐색 트리의 노드에 저장된 키는 유일하다.&lt;/li&gt;
      &lt;li&gt;규칙 2. 부모의 키가 왼쪽 자식 노드의 키보다 크다.&lt;/li&gt;
      &lt;li&gt;규칙 3. 부모의 키가 오른쪽 자식 노드의 키보다 작다.&lt;/li&gt;
      &lt;li&gt;규칙 4. 왼쪽과 오른쪽 서브트리도 이진 탐색 트리이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시간 복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;정확하게 말하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(h)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;트리의 높이를 하나씩 더해갈 수록 추가할 수 있는 노드의 수가 두 배씩 증가하기 때문
하지만 이러한 이진 탐색 트리는 Skewed Tree(편향 트리)가 될 수 있다.&lt;/li&gt;
          &lt;li&gt;이럴 경우 성능에 영향을 미치게 되며, 탐색의 Worst case가 되며, 시간 복잡도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;이 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rebalancing 기법
    &lt;ul&gt;
      &lt;li&gt;배열보다 많은 메모리를 사용하며 데이터를 저장했지만 탐색에 필요한 시간 복잡도가 같게 되는 비효율적인 문제를 해결하기 위한 기법&lt;/li&gt;
      &lt;li&gt;균형을 잡기 위한 트리 구조의 재조정&lt;/li&gt;
      &lt;li&gt;구현: Red-Black Tree&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-binary-heap&quot;&gt;&lt;strong&gt;4. Binary Heap&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;(1) 정의&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자료 구조의 일종으로, Tree의 형식
    &lt;ul&gt;
      &lt;li&gt;Tree 중에서도 배열의 기반한 Complete Binary Tree&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;배열에 트리의 값을 넣어줄 때, 0번째는 건너뛰고 1번 index 부터 루트 노드가 시작된다.
    &lt;ul&gt;
      &lt;li&gt;노드의 고유번호 값과 배열의 index를 일치시켜 혼동을 줄이기 위함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 종류&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최대힙(max heap)
    &lt;ul&gt;
      &lt;li&gt;각 노드의 값이 해당 children의 값보다 크거나 같은 complete binary tree&lt;/li&gt;
      &lt;li&gt;최댓값을 찾는데 필요한 시간복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;루트 노드에 있는 값이 가장 크기 때문&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;complete binary tree 이므로 배열을 사용하여 효율적으로 관리할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;random access가 가능하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최소힙(min heap)
    &lt;ul&gt;
      &lt;li&gt;각 노드의 값이 해당 children의 값보다 작거나 같은 complete binary tree&lt;/li&gt;
      &lt;li&gt;최솟값을 찾는데 필요한 시간복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 시간 복잡도&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heap의 구조를 계속 유지하기 위해서는 제거된 루트 노드를 대체할 다른 노드가 필요하다.&lt;/li&gt;
  &lt;li&gt;여기서 heap은 맨 마지막 노드를 루트 노드로 대체시킨 후, 다시 heapify 과정을 거쳐 heap 구조를 유지한다.
    &lt;ul&gt;
      &lt;li&gt;결국, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; 의 시간 복잡도로 최댓값 또는 최솟값이 접근할 수 있게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-red-black-treerbt&quot;&gt;5. &lt;strong&gt;Red Black Tree(RBT)&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;BST를 기반으로 하는 트리 형식의 자료 구조&lt;/li&gt;
  &lt;li&gt;BST의 삽입, 삭제 연산 과정에서 발생할 수 있는 문제점을 해결하기 위해 만들어진 자료구조&lt;/li&gt;
  &lt;li&gt;검색/삽입/삭제에 대한 시간 복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;동일한 노드 개수일 때, depth를 최소화하여 시간 복잡도를 줄이는 것이 핵심 아이디어
        &lt;ul&gt;
          &lt;li&gt;depth가 최소가 되는 경우는 tree가 complete binary tree 인 경우&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;51-red-black-tree의-정의&quot;&gt;&lt;strong&gt;5.1. Red Black Tree의 정의&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;각 노드는 Red or Black 이라는 색깔을 갖는다.&lt;/li&gt;
  &lt;li&gt;Root node의 색깔은 Black 이다.&lt;/li&gt;
  &lt;li&gt;각 leaf node는 Black 이다.&lt;/li&gt;
  &lt;li&gt;어떤 노드의 색깔이 Red 라면, 두 개의 children의 색깔은 모두 black 이다.&lt;/li&gt;
  &lt;li&gt;각 노드에 대해서 노드로부터 descendant leaves 까지의 단순 경로는 모두 같은 수의 black nodes 들을 포함하고 있다.
    &lt;ul&gt;
      &lt;li&gt;Black-Height: 노드 x로 부터 노드 x를 포함하지 않은 leaf node 까지의 simple path 상에 있는 black nodes 들의 개수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;52-red-black-tree의-특징&quot;&gt;&lt;strong&gt;5.2. Red Black Tree의 특징&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Binary Search Tree 이므로, BST의 특징을 모두 갖는다.&lt;/li&gt;
  &lt;li&gt;Root node 부터 leaf node 까지의 모든 경로 중 최소 경로와 최대 경로의 크기 비율은 2보다 크지 않다.
    &lt;ul&gt;
      &lt;li&gt;Balanced 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;노드의 child가 없을 경우 child를 가리키는 포인터는 NIL 값을 저장한다. 이러한 NIL 들은 leaf node로 간주한다.&lt;/li&gt;
  &lt;li&gt;Java Collection에서 ArrayList도 내부적으로 RBT로 이루어져 있고, HashMap에서의 Seperation Chaining에서도 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;53-red-black-tree의-삽입&quot;&gt;&lt;strong&gt;5.3. Red Black Tree의 삽입&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;BST의 특성을 유지하면서 노드를 삽입&lt;/li&gt;
  &lt;li&gt;삽입된 노드의 색깔을 Red로 지정
    &lt;ul&gt;
      &lt;li&gt;Red로 지정하는 이유: Black-Height 변경을 최소화하기 위함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;삽입 결과 RBT의 특성을 위배(violation)하는 경우 노드의 색깔을 조정하고, Black-Height가 위배되었다면 rotation을 통해 height를 조정한다.
    &lt;ul&gt;
      &lt;li&gt;RBT의 동일한 height에 존재하는 internal node 들의 Black-height가 같아지게 되고, 최소 경로와 최대 경로의 크기 비율이 2 미만으로 유지된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;54-red-black-tree의-삭제&quot;&gt;&lt;strong&gt;5.4. Red Black Tree의 삭제&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;BST의 특성을 유지하면서 노드를 삭제&lt;/li&gt;
  &lt;li&gt;삭제될 노드의 개수에 따라 rotation 방법이 달라지게 된다.
    &lt;ul&gt;
      &lt;li&gt;지워진 노드의 색깔이 Black 이라면 Black-Height가 1 감소한 경로에 black node가 1개 추가되도록 rotation하고 노드의 색깔을 조정한다.&lt;/li&gt;
      &lt;li&gt;지워진 노드의 색깔이 Red 라면 violation이 발생하지 않으므로 RBT가 유지된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-hash-table&quot;&gt;&lt;strong&gt;6. Hash Table&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;내부적으로 배열을 사용하여 데이터를 저장하기 때문에 빠른 검색 속도를 갖는다.&lt;/li&gt;
  &lt;li&gt;average case에 대한 시간 복잡도: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;특정한 값을 검색하는 데 데이터 고유의 인덱스로 접근하게 되기 때문&lt;/li&gt;
      &lt;li&gt;항상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;인 것은 아니며, average case에 대해서 인 것은 collision 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문제점
    &lt;ul&gt;
      &lt;li&gt;인덱스로 저장되는 key 값이 불규칙&lt;/li&gt;
      &lt;li&gt;해결책
        &lt;ul&gt;
          &lt;li&gt;특별한 알고리즘을 이용하여 저장할 데이터와 연관된 고유한 숫자를 만들어 낸 뒤 이를 인덱스로 사용한다.&lt;/li&gt;
          &lt;li&gt;특정 데이터가 저장되는 인덱스는 그 데이터만의 고유한 위치이기 때문에, 삽입 연산 시 다른 데이터의 사이에 끼어들거나, 삭제 시 다른 데이터로 채울 필요가 없으므로 연산에서 추가적인 비용이 없도록 만들어진 구조&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;61-hash-function&quot;&gt;&lt;strong&gt;6.1. Hash Function&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) 특징&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hash method&lt;/li&gt;
  &lt;li&gt;인덱스로 사용할 저장할 데이터와 연관된 고유한 숫자를 만들어 내는 해시 함수 또는 hash method
    &lt;ul&gt;
      &lt;li&gt;hash code: 해시 함수를 통해 반환된 데이터의 고유 숫자 값
        &lt;ul&gt;
          &lt;li&gt;저장되는 값들의 key 값을 hash function을 통해서 작은 범위의 값들로 바꿔준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;어설픈 해시 함수를 통해 key 값들을 결정하는 경우 동일한 값이 도출될 수 있다.
    &lt;ul&gt;
      &lt;li&gt;collision 발생
        &lt;ul&gt;
          &lt;li&gt;동일한 key 값에 복수 개의 데이터가 하나의 테이블에 존재하게 되는 것&lt;/li&gt;
          &lt;li&gt;서로 다른 두 개의 키가 같은 인덱스로 hashing(hash 함수를 통해 계산됨을 의미)되면 같은 곳에 저장할 수 없게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;collision이 많아 질수록 검색에 필요한 시간복잡도가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt; 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; 에 가까워 진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 해시 함수가 갖추어야 하는 조건&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 좋은 해시 함수: 키의 일부분을 참조하여 해시 값을 만들지 않고, 키 전체를 참조하여 생성
    &lt;ul&gt;
      &lt;li&gt;좋은 해시 함수는 키가 어떤 특성을 갖고 있느냐에 따라 달라진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;무조건 1:1로 만드는 것보다 collision을 최소화 하는 방향으로 설계하며, 이 collision에 대비하여 어떻게 대응할 것인가가 더 중요
    &lt;ul&gt;
      &lt;li&gt;1:1 대응이 되도록 만드는 것이 거의 불가능하기도 하다.
        &lt;ul&gt;
          &lt;li&gt;이러한 해시함수를 만든다 하더라도 이는 array와 다를 바 없고, 메모리도 너무 많이 차지하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) hashing 된 인덱스에 이미 다른 값이 들어 있다면, 새 데이터를 저장할 다른 위치를 찾은 뒤에야 저장할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;62-resolve-conflict&quot;&gt;&lt;strong&gt;6.2. Resolve Conflict&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;(1) Open Conflict&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해시 충돌이 발생하면(즉, 삽입하려는 해시 커밋이 이미 사용 중인 경우), 다른 해시 버킷에 해당 자료를 삽입하는 방식
    &lt;ul&gt;
      &lt;li&gt;버킷: 바구니와 같은 개념으로, 데이터를 저장하기 위한 공간&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공개 주소 방식이라고도 불리며, collision이 발생하면 데이터를 저장할 장소를 찾아 헤맨다.
    &lt;ul&gt;
      &lt;li&gt;최악의 경우: 비어있는 버킷을 찾지 못하고 탐색을 시작한 위치까지 되돌아 오는 경우
        &lt;ul&gt;
          &lt;li&gt;Linear Probing: 순차적으로 탐색하며, 비어있는 버킷을 찾을 때까지 계속 진행된다.&lt;/li&gt;
          &lt;li&gt;Quadratic probing: 2차 함수를 이용해 탐색할 위치를 찾는다.&lt;/li&gt;
          &lt;li&gt;Double hashing probing: 하나의 해시 함수에서 충돌이 발생하면, 2차 해시 함수를 이용해 새로운 주소를 할당한다. 위 두 가지 방법에 비해 많은 연산량을 요구하게 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot;&gt;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="CS" /><summary type="html">Array vs. Linked List 1.1. Array 1.2. Linked List</summary></entry><entry><title type="html">[책 - 이것이 자바다] 복습</title><link href="/Java-01" rel="alternate" type="text/html" title="[책 - 이것이 자바다] 복습" /><published>2021-05-08T00:00:00+00:00</published><updated>2021-05-08T00:00:00+00:00</updated><id>/Java-01</id><content type="html" xml:base="/Java-01">&lt;h4 id=&quot;chapter-07-객체지향-프로그래밍-ii&quot;&gt;&lt;strong&gt;Chapter 07. 객체지향 프로그래밍 II&lt;/strong&gt;&lt;/h4&gt;
&lt;h4 id=&quot;6-추상클래스abstract-class&quot;&gt;&lt;strong&gt;6. 추상클래스(abstract class)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;6.3. 추상클래스의 작성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우가 있다.&lt;/li&gt;
  &lt;li&gt;상속계층도를 따라 내려 갈수록 세분화되며, 올라갈수록 공통요소만 남게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-인터페이스interface&quot;&gt;&lt;strong&gt;7. 인터페이스(interface)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;7.2. 인터페이스의 작성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스의 멤버들의 제약사항
    &lt;ul&gt;
      &lt;li&gt;모든 멤버 변수는 public static final 이어야 하며, 이를 생략할 수 있다.&lt;/li&gt;
      &lt;li&gt;모든 메서드는 public abstract 이어야 하며, 이를 생략할 수 있다. &lt;br /&gt;
단, static 메서드와 디폴트 메서드는 예외(JDK 1.8부터)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;인터페이스이름&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;타입&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;상수이름&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;값&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;메서드이름&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;매개변수목록&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7.6. 인터페이스를 이용한 다형성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;리턴 타입이 인터페이스라는 것은 메서드가 해당 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.7. 인터페이스의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;개발시간을 단축시킬 수 있다.&lt;/li&gt;
  &lt;li&gt;표준화가 가능하다.&lt;/li&gt;
  &lt;li&gt;서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;독립적인 프로그래밍이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.8. 인터페이스의 이해&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클래스를 사용하는 쪽(User)과 클래스를 제공하는 쪽(Provider)이 있다. &lt;br /&gt;
메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 된다(내용은 몰라도 된다).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.9. 디폴트 메서드와 static 메서드&lt;/p&gt;

&lt;p&gt;(1) 디폴트 메서드&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;디폴트 메서드는 추상 메서드의 기본적인 구현을 제공하는 메서드
    &lt;ul&gt;
      &lt;li&gt;추상 메서드가 아니기 때문에 디폴트 메서드가 새로 추가되어도 해당 인터페이스를 구현한 클래스를 변경하지 않아도 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;public 생략 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;새로 추가된 디폴트 메서드가 기존의 메서드와 이름이 중복되어 충돌하는 경우
    &lt;ul&gt;
      &lt;li&gt;여러 인터페이스의 디폴트 메서드 간의 충돌: 인터페이스를 구현한 클래스에서 디폴트 메서드를 오버라이딩해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디폴트 메서드와 조상 클래스의 메서드 간의 충돌
    &lt;ul&gt;
      &lt;li&gt;조상 클래스의 메서드가 상속되고, 디폴트 메서드는 무시된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">Chapter 07. 객체지향 프로그래밍 II 6. 추상클래스(abstract class) 6.3. 추상클래스의 작성 기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우가 있다. 상속계층도를 따라 내려 갈수록 세분화되며, 올라갈수록 공통요소만 남게 된다.</summary></entry></feed>